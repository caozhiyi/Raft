// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/span.proto

#ifndef PROTOBUF_brpc_2fspan_2eproto__INCLUDED
#define PROTOBUF_brpc_2fspan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)

namespace brpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_brpc_2fspan_2eproto();
void protobuf_AssignDesc_brpc_2fspan_2eproto();
void protobuf_ShutdownFile_brpc_2fspan_2eproto();

class RpczSpan;
class BriefSpan;
class SpanAnnotation;
class TracingSpan;

enum SpanType {
  SPAN_TYPE_SERVER = 0,
  SPAN_TYPE_CLIENT = 1
};
bool SpanType_IsValid(int value);
const SpanType SpanType_MIN = SPAN_TYPE_SERVER;
const SpanType SpanType_MAX = SPAN_TYPE_CLIENT;
const int SpanType_ARRAYSIZE = SpanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpanType_descriptor();
inline const ::std::string& SpanType_Name(SpanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpanType_descriptor(), value);
}
inline bool SpanType_Parse(
    const ::std::string& name, SpanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpanType>(
    SpanType_descriptor(), name, value);
}
// ===================================================================

class RpczSpan : public ::google::protobuf::Message {
 public:
  RpczSpan();
  virtual ~RpczSpan();

  RpczSpan(const RpczSpan& from);

  inline RpczSpan& operator=(const RpczSpan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpczSpan& default_instance();

  void Swap(RpczSpan* other);

  // implements Message ----------------------------------------------

  RpczSpan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpczSpan& from);
  void MergeFrom(const RpczSpan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 trace_id = 1;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 trace_id() const;
  inline void set_trace_id(::google::protobuf::uint64 value);

  // required uint64 span_id = 2;
  inline bool has_span_id() const;
  inline void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  inline ::google::protobuf::uint64 span_id() const;
  inline void set_span_id(::google::protobuf::uint64 value);

  // required uint64 parent_span_id = 3;
  inline bool has_parent_span_id() const;
  inline void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 3;
  inline ::google::protobuf::uint64 parent_span_id() const;
  inline void set_parent_span_id(::google::protobuf::uint64 value);

  // optional uint64 log_id = 4;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 4;
  inline ::google::protobuf::uint64 log_id() const;
  inline void set_log_id(::google::protobuf::uint64 value);

  // optional uint64 base_cid = 5;
  inline bool has_base_cid() const;
  inline void clear_base_cid();
  static const int kBaseCidFieldNumber = 5;
  inline ::google::protobuf::uint64 base_cid() const;
  inline void set_base_cid(::google::protobuf::uint64 value);

  // optional uint64 ending_cid = 6;
  inline bool has_ending_cid() const;
  inline void clear_ending_cid();
  static const int kEndingCidFieldNumber = 6;
  inline ::google::protobuf::uint64 ending_cid() const;
  inline void set_ending_cid(::google::protobuf::uint64 value);

  // optional uint32 remote_ip = 7;
  inline bool has_remote_ip() const;
  inline void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 7;
  inline ::google::protobuf::uint32 remote_ip() const;
  inline void set_remote_ip(::google::protobuf::uint32 value);

  // optional uint32 remote_port = 8;
  inline bool has_remote_port() const;
  inline void clear_remote_port();
  static const int kRemotePortFieldNumber = 8;
  inline ::google::protobuf::uint32 remote_port() const;
  inline void set_remote_port(::google::protobuf::uint32 value);

  // optional .brpc.SpanType type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::brpc::SpanType type() const;
  inline void set_type(::brpc::SpanType value);

  // optional bool async = 10;
  inline bool has_async() const;
  inline void clear_async();
  static const int kAsyncFieldNumber = 10;
  inline bool async() const;
  inline void set_async(bool value);

  // optional .brpc.ProtocolType protocol = 11;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 11;
  inline ::brpc::ProtocolType protocol() const;
  inline void set_protocol(::brpc::ProtocolType value);

  // optional int32 error_code = 12;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 12;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional int32 request_size = 13;
  inline bool has_request_size() const;
  inline void clear_request_size();
  static const int kRequestSizeFieldNumber = 13;
  inline ::google::protobuf::int32 request_size() const;
  inline void set_request_size(::google::protobuf::int32 value);

  // optional int32 response_size = 14;
  inline bool has_response_size() const;
  inline void clear_response_size();
  static const int kResponseSizeFieldNumber = 14;
  inline ::google::protobuf::int32 response_size() const;
  inline void set_response_size(::google::protobuf::int32 value);

  // optional int64 received_real_us = 15;
  inline bool has_received_real_us() const;
  inline void clear_received_real_us();
  static const int kReceivedRealUsFieldNumber = 15;
  inline ::google::protobuf::int64 received_real_us() const;
  inline void set_received_real_us(::google::protobuf::int64 value);

  // optional int64 start_parse_real_us = 16;
  inline bool has_start_parse_real_us() const;
  inline void clear_start_parse_real_us();
  static const int kStartParseRealUsFieldNumber = 16;
  inline ::google::protobuf::int64 start_parse_real_us() const;
  inline void set_start_parse_real_us(::google::protobuf::int64 value);

  // optional int64 start_callback_real_us = 17;
  inline bool has_start_callback_real_us() const;
  inline void clear_start_callback_real_us();
  static const int kStartCallbackRealUsFieldNumber = 17;
  inline ::google::protobuf::int64 start_callback_real_us() const;
  inline void set_start_callback_real_us(::google::protobuf::int64 value);

  // optional int64 start_send_real_us = 18;
  inline bool has_start_send_real_us() const;
  inline void clear_start_send_real_us();
  static const int kStartSendRealUsFieldNumber = 18;
  inline ::google::protobuf::int64 start_send_real_us() const;
  inline void set_start_send_real_us(::google::protobuf::int64 value);

  // optional int64 sent_real_us = 19;
  inline bool has_sent_real_us() const;
  inline void clear_sent_real_us();
  static const int kSentRealUsFieldNumber = 19;
  inline ::google::protobuf::int64 sent_real_us() const;
  inline void set_sent_real_us(::google::protobuf::int64 value);

  // optional bytes info = 20;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 20;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // repeated .brpc.RpczSpan client_spans = 21;
  inline int client_spans_size() const;
  inline void clear_client_spans();
  static const int kClientSpansFieldNumber = 21;
  inline const ::brpc::RpczSpan& client_spans(int index) const;
  inline ::brpc::RpczSpan* mutable_client_spans(int index);
  inline ::brpc::RpczSpan* add_client_spans();
  inline const ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >&
      client_spans() const;
  inline ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >*
      mutable_client_spans();

  // optional bytes full_method_name = 22;
  inline bool has_full_method_name() const;
  inline void clear_full_method_name();
  static const int kFullMethodNameFieldNumber = 22;
  inline const ::std::string& full_method_name() const;
  inline void set_full_method_name(const ::std::string& value);
  inline void set_full_method_name(const char* value);
  inline void set_full_method_name(const void* value, size_t size);
  inline ::std::string* mutable_full_method_name();
  inline ::std::string* release_full_method_name();
  inline void set_allocated_full_method_name(::std::string* full_method_name);

  // @@protoc_insertion_point(class_scope:brpc.RpczSpan)
 private:
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_span_id();
  inline void clear_has_span_id();
  inline void set_has_parent_span_id();
  inline void clear_has_parent_span_id();
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_base_cid();
  inline void clear_has_base_cid();
  inline void set_has_ending_cid();
  inline void clear_has_ending_cid();
  inline void set_has_remote_ip();
  inline void clear_has_remote_ip();
  inline void set_has_remote_port();
  inline void clear_has_remote_port();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_async();
  inline void clear_has_async();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_request_size();
  inline void clear_has_request_size();
  inline void set_has_response_size();
  inline void clear_has_response_size();
  inline void set_has_received_real_us();
  inline void clear_has_received_real_us();
  inline void set_has_start_parse_real_us();
  inline void clear_has_start_parse_real_us();
  inline void set_has_start_callback_real_us();
  inline void clear_has_start_callback_real_us();
  inline void set_has_start_send_real_us();
  inline void clear_has_start_send_real_us();
  inline void set_has_sent_real_us();
  inline void clear_has_sent_real_us();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_full_method_name();
  inline void clear_has_full_method_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 trace_id_;
  ::google::protobuf::uint64 span_id_;
  ::google::protobuf::uint64 parent_span_id_;
  ::google::protobuf::uint64 log_id_;
  ::google::protobuf::uint64 base_cid_;
  ::google::protobuf::uint64 ending_cid_;
  ::google::protobuf::uint32 remote_ip_;
  ::google::protobuf::uint32 remote_port_;
  int type_;
  bool async_;
  int protocol_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 request_size_;
  ::google::protobuf::int32 response_size_;
  ::google::protobuf::int64 received_real_us_;
  ::google::protobuf::int64 start_parse_real_us_;
  ::google::protobuf::int64 start_callback_real_us_;
  ::google::protobuf::int64 start_send_real_us_;
  ::google::protobuf::int64 sent_real_us_;
  ::std::string* info_;
  ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan > client_spans_;
  ::std::string* full_method_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_brpc_2fspan_2eproto();
  friend void protobuf_AssignDesc_brpc_2fspan_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fspan_2eproto();

  void InitAsDefaultInstance();
  static RpczSpan* default_instance_;
};
// -------------------------------------------------------------------

class BriefSpan : public ::google::protobuf::Message {
 public:
  BriefSpan();
  virtual ~BriefSpan();

  BriefSpan(const BriefSpan& from);

  inline BriefSpan& operator=(const BriefSpan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BriefSpan& default_instance();

  void Swap(BriefSpan* other);

  // implements Message ----------------------------------------------

  BriefSpan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BriefSpan& from);
  void MergeFrom(const BriefSpan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 trace_id = 1;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 trace_id() const;
  inline void set_trace_id(::google::protobuf::uint64 value);

  // required uint64 span_id = 2;
  inline bool has_span_id() const;
  inline void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  inline ::google::protobuf::uint64 span_id() const;
  inline void set_span_id(::google::protobuf::uint64 value);

  // optional uint64 log_id = 3;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 3;
  inline ::google::protobuf::uint64 log_id() const;
  inline void set_log_id(::google::protobuf::uint64 value);

  // optional .brpc.SpanType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::brpc::SpanType type() const;
  inline void set_type(::brpc::SpanType value);

  // optional int32 error_code = 5;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional int32 request_size = 6;
  inline bool has_request_size() const;
  inline void clear_request_size();
  static const int kRequestSizeFieldNumber = 6;
  inline ::google::protobuf::int32 request_size() const;
  inline void set_request_size(::google::protobuf::int32 value);

  // optional int32 response_size = 7;
  inline bool has_response_size() const;
  inline void clear_response_size();
  static const int kResponseSizeFieldNumber = 7;
  inline ::google::protobuf::int32 response_size() const;
  inline void set_response_size(::google::protobuf::int32 value);

  // optional int64 start_real_us = 8;
  inline bool has_start_real_us() const;
  inline void clear_start_real_us();
  static const int kStartRealUsFieldNumber = 8;
  inline ::google::protobuf::int64 start_real_us() const;
  inline void set_start_real_us(::google::protobuf::int64 value);

  // optional int64 latency_us = 9;
  inline bool has_latency_us() const;
  inline void clear_latency_us();
  static const int kLatencyUsFieldNumber = 9;
  inline ::google::protobuf::int64 latency_us() const;
  inline void set_latency_us(::google::protobuf::int64 value);

  // optional bytes full_method_name = 10;
  inline bool has_full_method_name() const;
  inline void clear_full_method_name();
  static const int kFullMethodNameFieldNumber = 10;
  inline const ::std::string& full_method_name() const;
  inline void set_full_method_name(const ::std::string& value);
  inline void set_full_method_name(const char* value);
  inline void set_full_method_name(const void* value, size_t size);
  inline ::std::string* mutable_full_method_name();
  inline ::std::string* release_full_method_name();
  inline void set_allocated_full_method_name(::std::string* full_method_name);

  // @@protoc_insertion_point(class_scope:brpc.BriefSpan)
 private:
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_span_id();
  inline void clear_has_span_id();
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_request_size();
  inline void clear_has_request_size();
  inline void set_has_response_size();
  inline void clear_has_response_size();
  inline void set_has_start_real_us();
  inline void clear_has_start_real_us();
  inline void set_has_latency_us();
  inline void clear_has_latency_us();
  inline void set_has_full_method_name();
  inline void clear_has_full_method_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 trace_id_;
  ::google::protobuf::uint64 span_id_;
  ::google::protobuf::uint64 log_id_;
  int type_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 request_size_;
  ::google::protobuf::int32 response_size_;
  ::google::protobuf::int64 start_real_us_;
  ::google::protobuf::int64 latency_us_;
  ::std::string* full_method_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_brpc_2fspan_2eproto();
  friend void protobuf_AssignDesc_brpc_2fspan_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fspan_2eproto();

  void InitAsDefaultInstance();
  static BriefSpan* default_instance_;
};
// -------------------------------------------------------------------

class SpanAnnotation : public ::google::protobuf::Message {
 public:
  SpanAnnotation();
  virtual ~SpanAnnotation();

  SpanAnnotation(const SpanAnnotation& from);

  inline SpanAnnotation& operator=(const SpanAnnotation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpanAnnotation& default_instance();

  void Swap(SpanAnnotation* other);

  // implements Message ----------------------------------------------

  SpanAnnotation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpanAnnotation& from);
  void MergeFrom(const SpanAnnotation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 realtime_us = 1;
  inline bool has_realtime_us() const;
  inline void clear_realtime_us();
  static const int kRealtimeUsFieldNumber = 1;
  inline ::google::protobuf::int64 realtime_us() const;
  inline void set_realtime_us(::google::protobuf::int64 value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:brpc.SpanAnnotation)
 private:
  inline void set_has_realtime_us();
  inline void clear_has_realtime_us();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 realtime_us_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_brpc_2fspan_2eproto();
  friend void protobuf_AssignDesc_brpc_2fspan_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fspan_2eproto();

  void InitAsDefaultInstance();
  static SpanAnnotation* default_instance_;
};
// -------------------------------------------------------------------

class TracingSpan : public ::google::protobuf::Message {
 public:
  TracingSpan();
  virtual ~TracingSpan();

  TracingSpan(const TracingSpan& from);

  inline TracingSpan& operator=(const TracingSpan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TracingSpan& default_instance();

  void Swap(TracingSpan* other);

  // implements Message ----------------------------------------------

  TracingSpan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TracingSpan& from);
  void MergeFrom(const TracingSpan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 trace_id = 1;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 trace_id() const;
  inline void set_trace_id(::google::protobuf::uint64 value);

  // required uint64 span_id = 2;
  inline bool has_span_id() const;
  inline void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  inline ::google::protobuf::uint64 span_id() const;
  inline void set_span_id(::google::protobuf::uint64 value);

  // required uint64 parent_span_id = 3;
  inline bool has_parent_span_id() const;
  inline void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 3;
  inline ::google::protobuf::uint64 parent_span_id() const;
  inline void set_parent_span_id(::google::protobuf::uint64 value);

  // optional uint64 log_id = 4;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 4;
  inline ::google::protobuf::uint64 log_id() const;
  inline void set_log_id(::google::protobuf::uint64 value);

  // optional uint32 remote_ip = 5;
  inline bool has_remote_ip() const;
  inline void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 5;
  inline ::google::protobuf::uint32 remote_ip() const;
  inline void set_remote_ip(::google::protobuf::uint32 value);

  // optional uint32 remote_port = 6;
  inline bool has_remote_port() const;
  inline void clear_remote_port();
  static const int kRemotePortFieldNumber = 6;
  inline ::google::protobuf::uint32 remote_port() const;
  inline void set_remote_port(::google::protobuf::uint32 value);

  // optional .brpc.SpanType type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::brpc::SpanType type() const;
  inline void set_type(::brpc::SpanType value);

  // optional .brpc.ProtocolType protocol = 8;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 8;
  inline ::brpc::ProtocolType protocol() const;
  inline void set_protocol(::brpc::ProtocolType value);

  // optional int32 error_code = 9;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 9;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional int32 request_size = 10;
  inline bool has_request_size() const;
  inline void clear_request_size();
  static const int kRequestSizeFieldNumber = 10;
  inline ::google::protobuf::int32 request_size() const;
  inline void set_request_size(::google::protobuf::int32 value);

  // optional int32 response_size = 11;
  inline bool has_response_size() const;
  inline void clear_response_size();
  static const int kResponseSizeFieldNumber = 11;
  inline ::google::protobuf::int32 response_size() const;
  inline void set_response_size(::google::protobuf::int32 value);

  // optional int64 received_real_us = 12;
  inline bool has_received_real_us() const;
  inline void clear_received_real_us();
  static const int kReceivedRealUsFieldNumber = 12;
  inline ::google::protobuf::int64 received_real_us() const;
  inline void set_received_real_us(::google::protobuf::int64 value);

  // optional int64 start_parse_real_us = 13;
  inline bool has_start_parse_real_us() const;
  inline void clear_start_parse_real_us();
  static const int kStartParseRealUsFieldNumber = 13;
  inline ::google::protobuf::int64 start_parse_real_us() const;
  inline void set_start_parse_real_us(::google::protobuf::int64 value);

  // optional int64 start_callback_real_us = 14;
  inline bool has_start_callback_real_us() const;
  inline void clear_start_callback_real_us();
  static const int kStartCallbackRealUsFieldNumber = 14;
  inline ::google::protobuf::int64 start_callback_real_us() const;
  inline void set_start_callback_real_us(::google::protobuf::int64 value);

  // optional int64 start_send_real_us = 15;
  inline bool has_start_send_real_us() const;
  inline void clear_start_send_real_us();
  static const int kStartSendRealUsFieldNumber = 15;
  inline ::google::protobuf::int64 start_send_real_us() const;
  inline void set_start_send_real_us(::google::protobuf::int64 value);

  // optional int64 sent_real_us = 16;
  inline bool has_sent_real_us() const;
  inline void clear_sent_real_us();
  static const int kSentRealUsFieldNumber = 16;
  inline ::google::protobuf::int64 sent_real_us() const;
  inline void set_sent_real_us(::google::protobuf::int64 value);

  // optional string span_name = 17;
  inline bool has_span_name() const;
  inline void clear_span_name();
  static const int kSpanNameFieldNumber = 17;
  inline const ::std::string& span_name() const;
  inline void set_span_name(const ::std::string& value);
  inline void set_span_name(const char* value);
  inline void set_span_name(const char* value, size_t size);
  inline ::std::string* mutable_span_name();
  inline ::std::string* release_span_name();
  inline void set_allocated_span_name(::std::string* span_name);

  // repeated .brpc.SpanAnnotation annotations = 18;
  inline int annotations_size() const;
  inline void clear_annotations();
  static const int kAnnotationsFieldNumber = 18;
  inline const ::brpc::SpanAnnotation& annotations(int index) const;
  inline ::brpc::SpanAnnotation* mutable_annotations(int index);
  inline ::brpc::SpanAnnotation* add_annotations();
  inline const ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >&
      annotations() const;
  inline ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >*
      mutable_annotations();

  // repeated .brpc.TracingSpan client_spans = 19;
  inline int client_spans_size() const;
  inline void clear_client_spans();
  static const int kClientSpansFieldNumber = 19;
  inline const ::brpc::TracingSpan& client_spans(int index) const;
  inline ::brpc::TracingSpan* mutable_client_spans(int index);
  inline ::brpc::TracingSpan* add_client_spans();
  inline const ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >&
      client_spans() const;
  inline ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >*
      mutable_client_spans();

  // @@protoc_insertion_point(class_scope:brpc.TracingSpan)
 private:
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_span_id();
  inline void clear_has_span_id();
  inline void set_has_parent_span_id();
  inline void clear_has_parent_span_id();
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_remote_ip();
  inline void clear_has_remote_ip();
  inline void set_has_remote_port();
  inline void clear_has_remote_port();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_request_size();
  inline void clear_has_request_size();
  inline void set_has_response_size();
  inline void clear_has_response_size();
  inline void set_has_received_real_us();
  inline void clear_has_received_real_us();
  inline void set_has_start_parse_real_us();
  inline void clear_has_start_parse_real_us();
  inline void set_has_start_callback_real_us();
  inline void clear_has_start_callback_real_us();
  inline void set_has_start_send_real_us();
  inline void clear_has_start_send_real_us();
  inline void set_has_sent_real_us();
  inline void clear_has_sent_real_us();
  inline void set_has_span_name();
  inline void clear_has_span_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 trace_id_;
  ::google::protobuf::uint64 span_id_;
  ::google::protobuf::uint64 parent_span_id_;
  ::google::protobuf::uint64 log_id_;
  ::google::protobuf::uint32 remote_ip_;
  ::google::protobuf::uint32 remote_port_;
  int type_;
  int protocol_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 request_size_;
  ::google::protobuf::int64 received_real_us_;
  ::google::protobuf::int64 start_parse_real_us_;
  ::google::protobuf::int64 start_callback_real_us_;
  ::google::protobuf::int64 start_send_real_us_;
  ::google::protobuf::int64 sent_real_us_;
  ::std::string* span_name_;
  ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation > annotations_;
  ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan > client_spans_;
  ::google::protobuf::int32 response_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_brpc_2fspan_2eproto();
  friend void protobuf_AssignDesc_brpc_2fspan_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fspan_2eproto();

  void InitAsDefaultInstance();
  static TracingSpan* default_instance_;
};
// ===================================================================


// ===================================================================

// RpczSpan

// required uint64 trace_id = 1;
inline bool RpczSpan::has_trace_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpczSpan::set_has_trace_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpczSpan::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpczSpan::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
  clear_has_trace_id();
}
inline ::google::protobuf::uint64 RpczSpan::trace_id() const {
  return trace_id_;
}
inline void RpczSpan::set_trace_id(::google::protobuf::uint64 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// required uint64 span_id = 2;
inline bool RpczSpan::has_span_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpczSpan::set_has_span_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpczSpan::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpczSpan::clear_span_id() {
  span_id_ = GOOGLE_ULONGLONG(0);
  clear_has_span_id();
}
inline ::google::protobuf::uint64 RpczSpan::span_id() const {
  return span_id_;
}
inline void RpczSpan::set_span_id(::google::protobuf::uint64 value) {
  set_has_span_id();
  span_id_ = value;
}

// required uint64 parent_span_id = 3;
inline bool RpczSpan::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpczSpan::set_has_parent_span_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpczSpan::clear_has_parent_span_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpczSpan::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_ULONGLONG(0);
  clear_has_parent_span_id();
}
inline ::google::protobuf::uint64 RpczSpan::parent_span_id() const {
  return parent_span_id_;
}
inline void RpczSpan::set_parent_span_id(::google::protobuf::uint64 value) {
  set_has_parent_span_id();
  parent_span_id_ = value;
}

// optional uint64 log_id = 4;
inline bool RpczSpan::has_log_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpczSpan::set_has_log_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpczSpan::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpczSpan::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::uint64 RpczSpan::log_id() const {
  return log_id_;
}
inline void RpczSpan::set_log_id(::google::protobuf::uint64 value) {
  set_has_log_id();
  log_id_ = value;
}

// optional uint64 base_cid = 5;
inline bool RpczSpan::has_base_cid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpczSpan::set_has_base_cid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpczSpan::clear_has_base_cid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpczSpan::clear_base_cid() {
  base_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_base_cid();
}
inline ::google::protobuf::uint64 RpczSpan::base_cid() const {
  return base_cid_;
}
inline void RpczSpan::set_base_cid(::google::protobuf::uint64 value) {
  set_has_base_cid();
  base_cid_ = value;
}

// optional uint64 ending_cid = 6;
inline bool RpczSpan::has_ending_cid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpczSpan::set_has_ending_cid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpczSpan::clear_has_ending_cid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpczSpan::clear_ending_cid() {
  ending_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_ending_cid();
}
inline ::google::protobuf::uint64 RpczSpan::ending_cid() const {
  return ending_cid_;
}
inline void RpczSpan::set_ending_cid(::google::protobuf::uint64 value) {
  set_has_ending_cid();
  ending_cid_ = value;
}

// optional uint32 remote_ip = 7;
inline bool RpczSpan::has_remote_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpczSpan::set_has_remote_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpczSpan::clear_has_remote_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpczSpan::clear_remote_ip() {
  remote_ip_ = 0u;
  clear_has_remote_ip();
}
inline ::google::protobuf::uint32 RpczSpan::remote_ip() const {
  return remote_ip_;
}
inline void RpczSpan::set_remote_ip(::google::protobuf::uint32 value) {
  set_has_remote_ip();
  remote_ip_ = value;
}

// optional uint32 remote_port = 8;
inline bool RpczSpan::has_remote_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RpczSpan::set_has_remote_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RpczSpan::clear_has_remote_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RpczSpan::clear_remote_port() {
  remote_port_ = 0u;
  clear_has_remote_port();
}
inline ::google::protobuf::uint32 RpczSpan::remote_port() const {
  return remote_port_;
}
inline void RpczSpan::set_remote_port(::google::protobuf::uint32 value) {
  set_has_remote_port();
  remote_port_ = value;
}

// optional .brpc.SpanType type = 9;
inline bool RpczSpan::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RpczSpan::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RpczSpan::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RpczSpan::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::brpc::SpanType RpczSpan::type() const {
  return static_cast< ::brpc::SpanType >(type_);
}
inline void RpczSpan::set_type(::brpc::SpanType value) {
  assert(::brpc::SpanType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool async = 10;
inline bool RpczSpan::has_async() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RpczSpan::set_has_async() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RpczSpan::clear_has_async() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RpczSpan::clear_async() {
  async_ = false;
  clear_has_async();
}
inline bool RpczSpan::async() const {
  return async_;
}
inline void RpczSpan::set_async(bool value) {
  set_has_async();
  async_ = value;
}

// optional .brpc.ProtocolType protocol = 11;
inline bool RpczSpan::has_protocol() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RpczSpan::set_has_protocol() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RpczSpan::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RpczSpan::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
inline ::brpc::ProtocolType RpczSpan::protocol() const {
  return static_cast< ::brpc::ProtocolType >(protocol_);
}
inline void RpczSpan::set_protocol(::brpc::ProtocolType value) {
  assert(::brpc::ProtocolType_IsValid(value));
  set_has_protocol();
  protocol_ = value;
}

// optional int32 error_code = 12;
inline bool RpczSpan::has_error_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RpczSpan::set_has_error_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RpczSpan::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RpczSpan::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 RpczSpan::error_code() const {
  return error_code_;
}
inline void RpczSpan::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 request_size = 13;
inline bool RpczSpan::has_request_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RpczSpan::set_has_request_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RpczSpan::clear_has_request_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RpczSpan::clear_request_size() {
  request_size_ = 0;
  clear_has_request_size();
}
inline ::google::protobuf::int32 RpczSpan::request_size() const {
  return request_size_;
}
inline void RpczSpan::set_request_size(::google::protobuf::int32 value) {
  set_has_request_size();
  request_size_ = value;
}

// optional int32 response_size = 14;
inline bool RpczSpan::has_response_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RpczSpan::set_has_response_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RpczSpan::clear_has_response_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RpczSpan::clear_response_size() {
  response_size_ = 0;
  clear_has_response_size();
}
inline ::google::protobuf::int32 RpczSpan::response_size() const {
  return response_size_;
}
inline void RpczSpan::set_response_size(::google::protobuf::int32 value) {
  set_has_response_size();
  response_size_ = value;
}

// optional int64 received_real_us = 15;
inline bool RpczSpan::has_received_real_us() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RpczSpan::set_has_received_real_us() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RpczSpan::clear_has_received_real_us() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RpczSpan::clear_received_real_us() {
  received_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_received_real_us();
}
inline ::google::protobuf::int64 RpczSpan::received_real_us() const {
  return received_real_us_;
}
inline void RpczSpan::set_received_real_us(::google::protobuf::int64 value) {
  set_has_received_real_us();
  received_real_us_ = value;
}

// optional int64 start_parse_real_us = 16;
inline bool RpczSpan::has_start_parse_real_us() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RpczSpan::set_has_start_parse_real_us() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RpczSpan::clear_has_start_parse_real_us() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RpczSpan::clear_start_parse_real_us() {
  start_parse_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_start_parse_real_us();
}
inline ::google::protobuf::int64 RpczSpan::start_parse_real_us() const {
  return start_parse_real_us_;
}
inline void RpczSpan::set_start_parse_real_us(::google::protobuf::int64 value) {
  set_has_start_parse_real_us();
  start_parse_real_us_ = value;
}

// optional int64 start_callback_real_us = 17;
inline bool RpczSpan::has_start_callback_real_us() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RpczSpan::set_has_start_callback_real_us() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RpczSpan::clear_has_start_callback_real_us() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RpczSpan::clear_start_callback_real_us() {
  start_callback_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_start_callback_real_us();
}
inline ::google::protobuf::int64 RpczSpan::start_callback_real_us() const {
  return start_callback_real_us_;
}
inline void RpczSpan::set_start_callback_real_us(::google::protobuf::int64 value) {
  set_has_start_callback_real_us();
  start_callback_real_us_ = value;
}

// optional int64 start_send_real_us = 18;
inline bool RpczSpan::has_start_send_real_us() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RpczSpan::set_has_start_send_real_us() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RpczSpan::clear_has_start_send_real_us() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RpczSpan::clear_start_send_real_us() {
  start_send_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_start_send_real_us();
}
inline ::google::protobuf::int64 RpczSpan::start_send_real_us() const {
  return start_send_real_us_;
}
inline void RpczSpan::set_start_send_real_us(::google::protobuf::int64 value) {
  set_has_start_send_real_us();
  start_send_real_us_ = value;
}

// optional int64 sent_real_us = 19;
inline bool RpczSpan::has_sent_real_us() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RpczSpan::set_has_sent_real_us() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RpczSpan::clear_has_sent_real_us() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RpczSpan::clear_sent_real_us() {
  sent_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_sent_real_us();
}
inline ::google::protobuf::int64 RpczSpan::sent_real_us() const {
  return sent_real_us_;
}
inline void RpczSpan::set_sent_real_us(::google::protobuf::int64 value) {
  set_has_sent_real_us();
  sent_real_us_ = value;
}

// optional bytes info = 20;
inline bool RpczSpan::has_info() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RpczSpan::set_has_info() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RpczSpan::clear_has_info() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RpczSpan::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& RpczSpan::info() const {
  return *info_;
}
inline void RpczSpan::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void RpczSpan::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void RpczSpan::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpczSpan::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* RpczSpan::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpczSpan::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .brpc.RpczSpan client_spans = 21;
inline int RpczSpan::client_spans_size() const {
  return client_spans_.size();
}
inline void RpczSpan::clear_client_spans() {
  client_spans_.Clear();
}
inline const ::brpc::RpczSpan& RpczSpan::client_spans(int index) const {
  return client_spans_.Get(index);
}
inline ::brpc::RpczSpan* RpczSpan::mutable_client_spans(int index) {
  return client_spans_.Mutable(index);
}
inline ::brpc::RpczSpan* RpczSpan::add_client_spans() {
  return client_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >&
RpczSpan::client_spans() const {
  return client_spans_;
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::RpczSpan >*
RpczSpan::mutable_client_spans() {
  return &client_spans_;
}

// optional bytes full_method_name = 22;
inline bool RpczSpan::has_full_method_name() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RpczSpan::set_has_full_method_name() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RpczSpan::clear_has_full_method_name() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RpczSpan::clear_full_method_name() {
  if (full_method_name_ != &::google::protobuf::internal::kEmptyString) {
    full_method_name_->clear();
  }
  clear_has_full_method_name();
}
inline const ::std::string& RpczSpan::full_method_name() const {
  return *full_method_name_;
}
inline void RpczSpan::set_full_method_name(const ::std::string& value) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(value);
}
inline void RpczSpan::set_full_method_name(const char* value) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(value);
}
inline void RpczSpan::set_full_method_name(const void* value, size_t size) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpczSpan::mutable_full_method_name() {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  return full_method_name_;
}
inline ::std::string* RpczSpan::release_full_method_name() {
  clear_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_method_name_;
    full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RpczSpan::set_allocated_full_method_name(::std::string* full_method_name) {
  if (full_method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_method_name_;
  }
  if (full_method_name) {
    set_has_full_method_name();
    full_method_name_ = full_method_name;
  } else {
    clear_has_full_method_name();
    full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BriefSpan

// required uint64 trace_id = 1;
inline bool BriefSpan::has_trace_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BriefSpan::set_has_trace_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BriefSpan::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BriefSpan::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
  clear_has_trace_id();
}
inline ::google::protobuf::uint64 BriefSpan::trace_id() const {
  return trace_id_;
}
inline void BriefSpan::set_trace_id(::google::protobuf::uint64 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// required uint64 span_id = 2;
inline bool BriefSpan::has_span_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BriefSpan::set_has_span_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BriefSpan::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BriefSpan::clear_span_id() {
  span_id_ = GOOGLE_ULONGLONG(0);
  clear_has_span_id();
}
inline ::google::protobuf::uint64 BriefSpan::span_id() const {
  return span_id_;
}
inline void BriefSpan::set_span_id(::google::protobuf::uint64 value) {
  set_has_span_id();
  span_id_ = value;
}

// optional uint64 log_id = 3;
inline bool BriefSpan::has_log_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BriefSpan::set_has_log_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BriefSpan::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BriefSpan::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::uint64 BriefSpan::log_id() const {
  return log_id_;
}
inline void BriefSpan::set_log_id(::google::protobuf::uint64 value) {
  set_has_log_id();
  log_id_ = value;
}

// optional .brpc.SpanType type = 4;
inline bool BriefSpan::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BriefSpan::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BriefSpan::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BriefSpan::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::brpc::SpanType BriefSpan::type() const {
  return static_cast< ::brpc::SpanType >(type_);
}
inline void BriefSpan::set_type(::brpc::SpanType value) {
  assert(::brpc::SpanType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 error_code = 5;
inline bool BriefSpan::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BriefSpan::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BriefSpan::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BriefSpan::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 BriefSpan::error_code() const {
  return error_code_;
}
inline void BriefSpan::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 request_size = 6;
inline bool BriefSpan::has_request_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BriefSpan::set_has_request_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BriefSpan::clear_has_request_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BriefSpan::clear_request_size() {
  request_size_ = 0;
  clear_has_request_size();
}
inline ::google::protobuf::int32 BriefSpan::request_size() const {
  return request_size_;
}
inline void BriefSpan::set_request_size(::google::protobuf::int32 value) {
  set_has_request_size();
  request_size_ = value;
}

// optional int32 response_size = 7;
inline bool BriefSpan::has_response_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BriefSpan::set_has_response_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BriefSpan::clear_has_response_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BriefSpan::clear_response_size() {
  response_size_ = 0;
  clear_has_response_size();
}
inline ::google::protobuf::int32 BriefSpan::response_size() const {
  return response_size_;
}
inline void BriefSpan::set_response_size(::google::protobuf::int32 value) {
  set_has_response_size();
  response_size_ = value;
}

// optional int64 start_real_us = 8;
inline bool BriefSpan::has_start_real_us() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BriefSpan::set_has_start_real_us() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BriefSpan::clear_has_start_real_us() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BriefSpan::clear_start_real_us() {
  start_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_start_real_us();
}
inline ::google::protobuf::int64 BriefSpan::start_real_us() const {
  return start_real_us_;
}
inline void BriefSpan::set_start_real_us(::google::protobuf::int64 value) {
  set_has_start_real_us();
  start_real_us_ = value;
}

// optional int64 latency_us = 9;
inline bool BriefSpan::has_latency_us() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BriefSpan::set_has_latency_us() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BriefSpan::clear_has_latency_us() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BriefSpan::clear_latency_us() {
  latency_us_ = GOOGLE_LONGLONG(0);
  clear_has_latency_us();
}
inline ::google::protobuf::int64 BriefSpan::latency_us() const {
  return latency_us_;
}
inline void BriefSpan::set_latency_us(::google::protobuf::int64 value) {
  set_has_latency_us();
  latency_us_ = value;
}

// optional bytes full_method_name = 10;
inline bool BriefSpan::has_full_method_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BriefSpan::set_has_full_method_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BriefSpan::clear_has_full_method_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BriefSpan::clear_full_method_name() {
  if (full_method_name_ != &::google::protobuf::internal::kEmptyString) {
    full_method_name_->clear();
  }
  clear_has_full_method_name();
}
inline const ::std::string& BriefSpan::full_method_name() const {
  return *full_method_name_;
}
inline void BriefSpan::set_full_method_name(const ::std::string& value) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(value);
}
inline void BriefSpan::set_full_method_name(const char* value) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(value);
}
inline void BriefSpan::set_full_method_name(const void* value, size_t size) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BriefSpan::mutable_full_method_name() {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  return full_method_name_;
}
inline ::std::string* BriefSpan::release_full_method_name() {
  clear_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_method_name_;
    full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BriefSpan::set_allocated_full_method_name(::std::string* full_method_name) {
  if (full_method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_method_name_;
  }
  if (full_method_name) {
    set_has_full_method_name();
    full_method_name_ = full_method_name;
  } else {
    clear_has_full_method_name();
    full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SpanAnnotation

// required int64 realtime_us = 1;
inline bool SpanAnnotation::has_realtime_us() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpanAnnotation::set_has_realtime_us() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpanAnnotation::clear_has_realtime_us() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpanAnnotation::clear_realtime_us() {
  realtime_us_ = GOOGLE_LONGLONG(0);
  clear_has_realtime_us();
}
inline ::google::protobuf::int64 SpanAnnotation::realtime_us() const {
  return realtime_us_;
}
inline void SpanAnnotation::set_realtime_us(::google::protobuf::int64 value) {
  set_has_realtime_us();
  realtime_us_ = value;
}

// required string content = 2;
inline bool SpanAnnotation::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpanAnnotation::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpanAnnotation::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpanAnnotation::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SpanAnnotation::content() const {
  return *content_;
}
inline void SpanAnnotation::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SpanAnnotation::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SpanAnnotation::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpanAnnotation::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SpanAnnotation::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpanAnnotation::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TracingSpan

// required uint64 trace_id = 1;
inline bool TracingSpan::has_trace_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TracingSpan::set_has_trace_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TracingSpan::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TracingSpan::clear_trace_id() {
  trace_id_ = GOOGLE_ULONGLONG(0);
  clear_has_trace_id();
}
inline ::google::protobuf::uint64 TracingSpan::trace_id() const {
  return trace_id_;
}
inline void TracingSpan::set_trace_id(::google::protobuf::uint64 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// required uint64 span_id = 2;
inline bool TracingSpan::has_span_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TracingSpan::set_has_span_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TracingSpan::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TracingSpan::clear_span_id() {
  span_id_ = GOOGLE_ULONGLONG(0);
  clear_has_span_id();
}
inline ::google::protobuf::uint64 TracingSpan::span_id() const {
  return span_id_;
}
inline void TracingSpan::set_span_id(::google::protobuf::uint64 value) {
  set_has_span_id();
  span_id_ = value;
}

// required uint64 parent_span_id = 3;
inline bool TracingSpan::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TracingSpan::set_has_parent_span_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TracingSpan::clear_has_parent_span_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TracingSpan::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_ULONGLONG(0);
  clear_has_parent_span_id();
}
inline ::google::protobuf::uint64 TracingSpan::parent_span_id() const {
  return parent_span_id_;
}
inline void TracingSpan::set_parent_span_id(::google::protobuf::uint64 value) {
  set_has_parent_span_id();
  parent_span_id_ = value;
}

// optional uint64 log_id = 4;
inline bool TracingSpan::has_log_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TracingSpan::set_has_log_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TracingSpan::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TracingSpan::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::uint64 TracingSpan::log_id() const {
  return log_id_;
}
inline void TracingSpan::set_log_id(::google::protobuf::uint64 value) {
  set_has_log_id();
  log_id_ = value;
}

// optional uint32 remote_ip = 5;
inline bool TracingSpan::has_remote_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TracingSpan::set_has_remote_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TracingSpan::clear_has_remote_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TracingSpan::clear_remote_ip() {
  remote_ip_ = 0u;
  clear_has_remote_ip();
}
inline ::google::protobuf::uint32 TracingSpan::remote_ip() const {
  return remote_ip_;
}
inline void TracingSpan::set_remote_ip(::google::protobuf::uint32 value) {
  set_has_remote_ip();
  remote_ip_ = value;
}

// optional uint32 remote_port = 6;
inline bool TracingSpan::has_remote_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TracingSpan::set_has_remote_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TracingSpan::clear_has_remote_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TracingSpan::clear_remote_port() {
  remote_port_ = 0u;
  clear_has_remote_port();
}
inline ::google::protobuf::uint32 TracingSpan::remote_port() const {
  return remote_port_;
}
inline void TracingSpan::set_remote_port(::google::protobuf::uint32 value) {
  set_has_remote_port();
  remote_port_ = value;
}

// optional .brpc.SpanType type = 7;
inline bool TracingSpan::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TracingSpan::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TracingSpan::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TracingSpan::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::brpc::SpanType TracingSpan::type() const {
  return static_cast< ::brpc::SpanType >(type_);
}
inline void TracingSpan::set_type(::brpc::SpanType value) {
  assert(::brpc::SpanType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .brpc.ProtocolType protocol = 8;
inline bool TracingSpan::has_protocol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TracingSpan::set_has_protocol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TracingSpan::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TracingSpan::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
inline ::brpc::ProtocolType TracingSpan::protocol() const {
  return static_cast< ::brpc::ProtocolType >(protocol_);
}
inline void TracingSpan::set_protocol(::brpc::ProtocolType value) {
  assert(::brpc::ProtocolType_IsValid(value));
  set_has_protocol();
  protocol_ = value;
}

// optional int32 error_code = 9;
inline bool TracingSpan::has_error_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TracingSpan::set_has_error_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TracingSpan::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TracingSpan::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 TracingSpan::error_code() const {
  return error_code_;
}
inline void TracingSpan::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 request_size = 10;
inline bool TracingSpan::has_request_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TracingSpan::set_has_request_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TracingSpan::clear_has_request_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TracingSpan::clear_request_size() {
  request_size_ = 0;
  clear_has_request_size();
}
inline ::google::protobuf::int32 TracingSpan::request_size() const {
  return request_size_;
}
inline void TracingSpan::set_request_size(::google::protobuf::int32 value) {
  set_has_request_size();
  request_size_ = value;
}

// optional int32 response_size = 11;
inline bool TracingSpan::has_response_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TracingSpan::set_has_response_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TracingSpan::clear_has_response_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TracingSpan::clear_response_size() {
  response_size_ = 0;
  clear_has_response_size();
}
inline ::google::protobuf::int32 TracingSpan::response_size() const {
  return response_size_;
}
inline void TracingSpan::set_response_size(::google::protobuf::int32 value) {
  set_has_response_size();
  response_size_ = value;
}

// optional int64 received_real_us = 12;
inline bool TracingSpan::has_received_real_us() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TracingSpan::set_has_received_real_us() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TracingSpan::clear_has_received_real_us() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TracingSpan::clear_received_real_us() {
  received_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_received_real_us();
}
inline ::google::protobuf::int64 TracingSpan::received_real_us() const {
  return received_real_us_;
}
inline void TracingSpan::set_received_real_us(::google::protobuf::int64 value) {
  set_has_received_real_us();
  received_real_us_ = value;
}

// optional int64 start_parse_real_us = 13;
inline bool TracingSpan::has_start_parse_real_us() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TracingSpan::set_has_start_parse_real_us() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TracingSpan::clear_has_start_parse_real_us() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TracingSpan::clear_start_parse_real_us() {
  start_parse_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_start_parse_real_us();
}
inline ::google::protobuf::int64 TracingSpan::start_parse_real_us() const {
  return start_parse_real_us_;
}
inline void TracingSpan::set_start_parse_real_us(::google::protobuf::int64 value) {
  set_has_start_parse_real_us();
  start_parse_real_us_ = value;
}

// optional int64 start_callback_real_us = 14;
inline bool TracingSpan::has_start_callback_real_us() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TracingSpan::set_has_start_callback_real_us() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TracingSpan::clear_has_start_callback_real_us() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TracingSpan::clear_start_callback_real_us() {
  start_callback_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_start_callback_real_us();
}
inline ::google::protobuf::int64 TracingSpan::start_callback_real_us() const {
  return start_callback_real_us_;
}
inline void TracingSpan::set_start_callback_real_us(::google::protobuf::int64 value) {
  set_has_start_callback_real_us();
  start_callback_real_us_ = value;
}

// optional int64 start_send_real_us = 15;
inline bool TracingSpan::has_start_send_real_us() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TracingSpan::set_has_start_send_real_us() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TracingSpan::clear_has_start_send_real_us() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TracingSpan::clear_start_send_real_us() {
  start_send_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_start_send_real_us();
}
inline ::google::protobuf::int64 TracingSpan::start_send_real_us() const {
  return start_send_real_us_;
}
inline void TracingSpan::set_start_send_real_us(::google::protobuf::int64 value) {
  set_has_start_send_real_us();
  start_send_real_us_ = value;
}

// optional int64 sent_real_us = 16;
inline bool TracingSpan::has_sent_real_us() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TracingSpan::set_has_sent_real_us() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TracingSpan::clear_has_sent_real_us() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TracingSpan::clear_sent_real_us() {
  sent_real_us_ = GOOGLE_LONGLONG(0);
  clear_has_sent_real_us();
}
inline ::google::protobuf::int64 TracingSpan::sent_real_us() const {
  return sent_real_us_;
}
inline void TracingSpan::set_sent_real_us(::google::protobuf::int64 value) {
  set_has_sent_real_us();
  sent_real_us_ = value;
}

// optional string span_name = 17;
inline bool TracingSpan::has_span_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TracingSpan::set_has_span_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TracingSpan::clear_has_span_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TracingSpan::clear_span_name() {
  if (span_name_ != &::google::protobuf::internal::kEmptyString) {
    span_name_->clear();
  }
  clear_has_span_name();
}
inline const ::std::string& TracingSpan::span_name() const {
  return *span_name_;
}
inline void TracingSpan::set_span_name(const ::std::string& value) {
  set_has_span_name();
  if (span_name_ == &::google::protobuf::internal::kEmptyString) {
    span_name_ = new ::std::string;
  }
  span_name_->assign(value);
}
inline void TracingSpan::set_span_name(const char* value) {
  set_has_span_name();
  if (span_name_ == &::google::protobuf::internal::kEmptyString) {
    span_name_ = new ::std::string;
  }
  span_name_->assign(value);
}
inline void TracingSpan::set_span_name(const char* value, size_t size) {
  set_has_span_name();
  if (span_name_ == &::google::protobuf::internal::kEmptyString) {
    span_name_ = new ::std::string;
  }
  span_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TracingSpan::mutable_span_name() {
  set_has_span_name();
  if (span_name_ == &::google::protobuf::internal::kEmptyString) {
    span_name_ = new ::std::string;
  }
  return span_name_;
}
inline ::std::string* TracingSpan::release_span_name() {
  clear_has_span_name();
  if (span_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = span_name_;
    span_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TracingSpan::set_allocated_span_name(::std::string* span_name) {
  if (span_name_ != &::google::protobuf::internal::kEmptyString) {
    delete span_name_;
  }
  if (span_name) {
    set_has_span_name();
    span_name_ = span_name;
  } else {
    clear_has_span_name();
    span_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .brpc.SpanAnnotation annotations = 18;
inline int TracingSpan::annotations_size() const {
  return annotations_.size();
}
inline void TracingSpan::clear_annotations() {
  annotations_.Clear();
}
inline const ::brpc::SpanAnnotation& TracingSpan::annotations(int index) const {
  return annotations_.Get(index);
}
inline ::brpc::SpanAnnotation* TracingSpan::mutable_annotations(int index) {
  return annotations_.Mutable(index);
}
inline ::brpc::SpanAnnotation* TracingSpan::add_annotations() {
  return annotations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >&
TracingSpan::annotations() const {
  return annotations_;
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::SpanAnnotation >*
TracingSpan::mutable_annotations() {
  return &annotations_;
}

// repeated .brpc.TracingSpan client_spans = 19;
inline int TracingSpan::client_spans_size() const {
  return client_spans_.size();
}
inline void TracingSpan::clear_client_spans() {
  client_spans_.Clear();
}
inline const ::brpc::TracingSpan& TracingSpan::client_spans(int index) const {
  return client_spans_.Get(index);
}
inline ::brpc::TracingSpan* TracingSpan::mutable_client_spans(int index) {
  return client_spans_.Mutable(index);
}
inline ::brpc::TracingSpan* TracingSpan::add_client_spans() {
  return client_spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >&
TracingSpan::client_spans() const {
  return client_spans_;
}
inline ::google::protobuf::RepeatedPtrField< ::brpc::TracingSpan >*
TracingSpan::mutable_client_spans() {
  return &client_spans_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::brpc::SpanType>() {
  return ::brpc::SpanType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_brpc_2fspan_2eproto__INCLUDED
