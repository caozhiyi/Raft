// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace raft {
class HeartBeatResquestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatResquest> _instance;
} _HeartBeatResquest_default_instance_;
class HeartBeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeatResponse> _instance;
} _HeartBeatResponse_default_instance_;
class VoteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteRequest> _instance;
} _VoteRequest_default_instance_;
class VoteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteResponse> _instance;
} _VoteResponse_default_instance_;
class EntriesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntriesRequest> _instance;
} _EntriesRequest_default_instance_;
class NodeInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfoRequest> _instance;
} _NodeInfoRequest_default_instance_;
class NodeInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfoResponse> _instance;
} _NodeInfoResponse_default_instance_;
class EntriesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntriesResponse> _instance;
} _EntriesResponse_default_instance_;
}  // namespace raft
static void InitDefaultsscc_info_EntriesRequest_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_EntriesRequest_default_instance_;
    new (ptr) ::raft::EntriesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::EntriesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntriesRequest_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EntriesRequest_message_2eproto}, {}};

static void InitDefaultsscc_info_EntriesResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_EntriesResponse_default_instance_;
    new (ptr) ::raft::EntriesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::EntriesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntriesResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EntriesResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeatResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_HeartBeatResponse_default_instance_;
    new (ptr) ::raft::HeartBeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::HeartBeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeatResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeatResquest_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_HeartBeatResquest_default_instance_;
    new (ptr) ::raft::HeartBeatResquest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::HeartBeatResquest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeatResquest_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeatResquest_message_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfoRequest_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_NodeInfoRequest_default_instance_;
    new (ptr) ::raft::NodeInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::NodeInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfoRequest_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfoRequest_message_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfoResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_NodeInfoResponse_default_instance_;
    new (ptr) ::raft::NodeInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::NodeInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfoResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfoResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_VoteRequest_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_VoteRequest_default_instance_;
    new (ptr) ::raft::VoteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::VoteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteRequest_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteRequest_message_2eproto}, {}};

static void InitDefaultsscc_info_VoteResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft::_VoteResponse_default_instance_;
    new (ptr) ::raft::VoteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::VoteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VoteResponse_message_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_message_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResquest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResquest, term_),
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResquest, leader_id_),
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResquest, prev_log_index_),
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResquest, prev_log_term_),
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResquest, entries_),
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResquest, leader_commit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResponse, success_),
  PROTOBUF_FIELD_OFFSET(::raft::HeartBeatResponse, next_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, term_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, candidate_id_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, last_index_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, last_term_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::VoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::VoteResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteResponse, vote_granted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::EntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::EntriesRequest, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::NodeInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::NodeInfoRequest, net_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::NodeInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::NodeInfoResponse, net_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::EntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::EntriesResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::raft::EntriesResponse, leader_net_handle_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raft::HeartBeatResquest)},
  { 11, -1, sizeof(::raft::HeartBeatResponse)},
  { 19, -1, sizeof(::raft::VoteRequest)},
  { 28, -1, sizeof(::raft::VoteResponse)},
  { 35, -1, sizeof(::raft::EntriesRequest)},
  { 41, -1, sizeof(::raft::NodeInfoRequest)},
  { 47, -1, sizeof(::raft::NodeInfoResponse)},
  { 53, -1, sizeof(::raft::EntriesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_HeartBeatResquest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_HeartBeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_VoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_VoteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_EntriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_NodeInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_NodeInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_EntriesResponse_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\004raft\"\213\001\n\021HeartBeatResqu"
  "est\022\014\n\004term\030\001 \001(\r\022\021\n\tleader_id\030\002 \001(\r\022\026\n\016"
  "prev_log_index\030\003 \001(\004\022\025\n\rprev_log_term\030\004 "
  "\001(\r\022\017\n\007entries\030\005 \003(\014\022\025\n\rleader_commit\030\006 "
  "\001(\004\"F\n\021HeartBeatResponse\022\014\n\004term\030\001 \001(\r\022\017"
  "\n\007success\030\002 \001(\010\022\022\n\nnext_index\030\003 \001(\004\"X\n\013V"
  "oteRequest\022\014\n\004term\030\001 \001(\r\022\024\n\014candidate_id"
  "\030\002 \001(\r\022\022\n\nlast_index\030\003 \001(\004\022\021\n\tlast_term\030"
  "\004 \001(\r\"2\n\014VoteResponse\022\014\n\004term\030\001 \001(\r\022\024\n\014v"
  "ote_granted\030\002 \001(\010\" \n\rEntriesRequest\022\017\n\007en"
  "tries\030\001 \001(\014\"%\n\017NodeInfoRequest\022\022\n\nnet_ha"
  "ndle\030\001 \003(\t\"&\n\020NodeInfoResponse\022\022\n\nnet_ha"
  "ndle\030\001 \003(\t\"T\n\016EntriesResponse\022\'\n\010ret_code"
  "\030\001 \001(\0162\025.raft.CLIENT_RES_CODE\022\031\n\021leader_"
  "net_handle\030\002 \001(\t*O\n\017CLIENT_RES_CODE\022\013\n\007s"
  "uccess\020\000\022\016\n\nnot_leader\020\001\022\017\n\013other_error\020"
  "\002\022\016\n\nsend_again\020\0032\366\001\n\013RaftService\022<\n\010Rpc"
  "Heart\022\027.raft.HeartBeatResquest\032\027.raft.He"
  "artBeatResponse\0220\n\007RpcVote\022\021.raft.VoteRe"
  "quest\032\022.raft.VoteResponse\022<\n\013RpcNodeInfo"
  "\022\025.raft.NodeInfoRequest\032\026.raft.NodeInfoR"
  "esponse\0229\n\014RpcClientMsg\022\023.raft.ClientReq"
  "uest\032\024.raft.EntriesResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[8] = {
  &scc_info_EntriesRequest_message_2eproto.base,
  &scc_info_EntriesResponse_message_2eproto.base,
  &scc_info_HeartBeatResponse_message_2eproto.base,
  &scc_info_HeartBeatResquest_message_2eproto.base,
  &scc_info_NodeInfoRequest_message_2eproto.base,
  &scc_info_NodeInfoResponse_message_2eproto.base,
  &scc_info_VoteRequest_message_2eproto.base,
  &scc_info_VoteResponse_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
static bool descriptor_table_message_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  &descriptor_table_message_2eproto_initialized, descriptor_table_protodef_message_2eproto, "message.proto", 919,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 8, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto), true);
namespace raft {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CLIENT_RES_CODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool CLIENT_RES_CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void HeartBeatResquest::InitAsDefaultInstance() {
}
class HeartBeatResquest::_Internal {
 public:
};

HeartBeatResquest::HeartBeatResquest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.HeartBeatResquest)
}
HeartBeatResquest::HeartBeatResquest(const HeartBeatResquest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_log_term_) -
    reinterpret_cast<char*>(&term_)) + sizeof(prev_log_term_));
  // @@protoc_insertion_point(copy_constructor:raft.HeartBeatResquest)
}

void HeartBeatResquest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeatResquest_message_2eproto.base);
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_log_term_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prev_log_term_));
}

HeartBeatResquest::~HeartBeatResquest() {
  // @@protoc_insertion_point(destructor:raft.HeartBeatResquest)
  SharedDtor();
}

void HeartBeatResquest::SharedDtor() {
}

void HeartBeatResquest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatResquest& HeartBeatResquest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatResquest_message_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatResquest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.HeartBeatResquest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_log_term_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prev_log_term_));
  _internal_metadata_.Clear();
}

const char* HeartBeatResquest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prev_log_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prev_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prev_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entries();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 leader_commit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatResquest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.HeartBeatResquest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // uint32 leader_id = 2;
  if (this->leader_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leader_id(), target);
  }

  // uint64 prev_log_index = 3;
  if (this->prev_log_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_prev_log_index(), target);
  }

  // uint32 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prev_log_term(), target);
  }

  // repeated bytes entries = 5;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    target = stream->WriteBytes(5, s, target);
  }

  // uint64 leader_commit = 6;
  if (this->leader_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_leader_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.HeartBeatResquest)
  return target;
}

size_t HeartBeatResquest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.HeartBeatResquest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes entries = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(entries_.size());
  for (int i = 0, n = entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      entries_.Get(i));
  }

  // uint32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  // uint32 leader_id = 2;
  if (this->leader_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leader_id());
  }

  // uint64 prev_log_index = 3;
  if (this->prev_log_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prev_log_index());
  }

  // uint64 leader_commit = 6;
  if (this->leader_commit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_leader_commit());
  }

  // uint32 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_log_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatResquest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.HeartBeatResquest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatResquest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatResquest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.HeartBeatResquest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.HeartBeatResquest)
    MergeFrom(*source);
  }
}

void HeartBeatResquest::MergeFrom(const HeartBeatResquest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.HeartBeatResquest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.leader_id() != 0) {
    _internal_set_leader_id(from._internal_leader_id());
  }
  if (from.prev_log_index() != 0) {
    _internal_set_prev_log_index(from._internal_prev_log_index());
  }
  if (from.leader_commit() != 0) {
    _internal_set_leader_commit(from._internal_leader_commit());
  }
  if (from.prev_log_term() != 0) {
    _internal_set_prev_log_term(from._internal_prev_log_term());
  }
}

void HeartBeatResquest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.HeartBeatResquest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResquest::CopyFrom(const HeartBeatResquest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.HeartBeatResquest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResquest::IsInitialized() const {
  return true;
}

void HeartBeatResquest::InternalSwap(HeartBeatResquest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  swap(term_, other->term_);
  swap(leader_id_, other->leader_id_);
  swap(prev_log_index_, other->prev_log_index_);
  swap(leader_commit_, other->leader_commit_);
  swap(prev_log_term_, other->prev_log_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResquest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeatResponse::InitAsDefaultInstance() {
}
class HeartBeatResponse::_Internal {
 public:
};

HeartBeatResponse::HeartBeatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(next_index_));
  // @@protoc_insertion_point(copy_constructor:raft.HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(next_index_));
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:raft.HeartBeatResponse)
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
}

void HeartBeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeatResponse& HeartBeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeatResponse_message_2eproto.base);
  return *internal_default_instance();
}


void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.HeartBeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(next_index_));
  _internal_metadata_.Clear();
}

const char* HeartBeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 next_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          next_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.HeartBeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // uint64 next_index = 3;
  if (this->next_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_next_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.HeartBeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint64 next_index = 3;
  if (this->next_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.HeartBeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.HeartBeatResponse)
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.next_index() != 0) {
    _internal_set_next_index(from._internal_next_index());
  }
}

void HeartBeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  return true;
}

void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(success_, other->success_);
  swap(next_index_, other->next_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoteRequest::InitAsDefaultInstance() {
}
class VoteRequest::_Internal {
 public:
};

VoteRequest::VoteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.VoteRequest)
}
VoteRequest::VoteRequest(const VoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_term_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_term_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteRequest)
}

void VoteRequest::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_term_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_term_));
}

VoteRequest::~VoteRequest() {
  // @@protoc_insertion_point(destructor:raft.VoteRequest)
  SharedDtor();
}

void VoteRequest::SharedDtor() {
}

void VoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteRequest& VoteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteRequest_message_2eproto.base);
  return *internal_default_instance();
}


void VoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_term_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_term_));
  _internal_metadata_.Clear();
}

const char* VoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 candidate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          candidate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // uint32 candidate_id = 2;
  if (this->candidate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_candidate_id(), target);
  }

  // uint64 last_index = 3;
  if (this->last_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_index(), target);
  }

  // uint32 last_term = 4;
  if (this->last_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteRequest)
  return target;
}

size_t VoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  // uint32 candidate_id = 2;
  if (this->candidate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_candidate_id());
  }

  // uint64 last_index = 3;
  if (this->last_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_index());
  }

  // uint32 last_term = 4;
  if (this->last_term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_term());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.VoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.VoteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.VoteRequest)
    MergeFrom(*source);
  }
}

void VoteRequest::MergeFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.candidate_id() != 0) {
    _internal_set_candidate_id(from._internal_candidate_id());
  }
  if (from.last_index() != 0) {
    _internal_set_last_index(from._internal_last_index());
  }
  if (from.last_term() != 0) {
    _internal_set_last_term(from._internal_last_term());
  }
}

void VoteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteRequest::CopyFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequest::IsInitialized() const {
  return true;
}

void VoteRequest::InternalSwap(VoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(candidate_id_, other->candidate_id_);
  swap(last_index_, other->last_index_);
  swap(last_term_, other->last_term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoteResponse::InitAsDefaultInstance() {
}
class VoteResponse::_Internal {
 public:
};

VoteResponse::VoteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.VoteResponse)
}
VoteResponse::VoteResponse(const VoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_granted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteResponse)
}

void VoteResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_granted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
}

VoteResponse::~VoteResponse() {
  // @@protoc_insertion_point(destructor:raft.VoteResponse)
  SharedDtor();
}

void VoteResponse::SharedDtor() {
}

void VoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteResponse& VoteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteResponse_message_2eproto.base);
  return *internal_default_instance();
}


void VoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_granted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(vote_granted_));
  _internal_metadata_.Clear();
}

const char* VoteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vote_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_term(), target);
  }

  // bool vote_granted = 2;
  if (this->vote_granted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteResponse)
  return target;
}

size_t VoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_term());
  }

  // bool vote_granted = 2;
  if (this->vote_granted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.VoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.VoteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.VoteResponse)
    MergeFrom(*source);
  }
}

void VoteResponse::MergeFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.vote_granted() != 0) {
    _internal_set_vote_granted(from._internal_vote_granted());
  }
}

void VoteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.VoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResponse::CopyFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResponse::IsInitialized() const {
  return true;
}

void VoteResponse::InternalSwap(VoteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(term_, other->term_);
  swap(vote_granted_, other->vote_granted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntriesRequest::InitAsDefaultInstance() {
}
class EntriesRequest::_Internal {
 public:
};

EntriesRequest::EntriesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.EntriesRequest)
}
EntriesRequest::EntriesRequest(const EntriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entries().empty()) {
    entries_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entries_);
  }
  // @@protoc_insertion_point(copy_constructor:raft.EntriesRequest)
}

void EntriesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntriesRequest_message_2eproto.base);
  entries_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EntriesRequest::~EntriesRequest() {
  // @@protoc_insertion_point(destructor:raft.EntriesRequest)
  SharedDtor();
}

void EntriesRequest::SharedDtor() {
  entries_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntriesRequest& EntriesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntriesRequest_message_2eproto.base);
  return *internal_default_instance();
}


void EntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.EntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EntriesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entries();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntriesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.EntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes entries = 1;
  if (this->entries().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.EntriesRequest)
  return target;
}

size_t EntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.EntriesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes entries = 1;
  if (this->entries().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entries());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntriesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.EntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EntriesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntriesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.EntriesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.EntriesRequest)
    MergeFrom(*source);
  }
}

void EntriesRequest::MergeFrom(const EntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.EntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entries().size() > 0) {

    entries_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entries_);
  }
}

void EntriesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.EntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntriesRequest::CopyFrom(const EntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.EntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntriesRequest::IsInitialized() const {
  return true;
}

void EntriesRequest::InternalSwap(EntriesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entries_.Swap(&other->entries_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EntriesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfoRequest::InitAsDefaultInstance() {
}
class NodeInfoRequest::_Internal {
 public:
};

NodeInfoRequest::NodeInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.NodeInfoRequest)
}
NodeInfoRequest::NodeInfoRequest(const NodeInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      net_handle_(from.net_handle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.NodeInfoRequest)
}

void NodeInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfoRequest_message_2eproto.base);
}

NodeInfoRequest::~NodeInfoRequest() {
  // @@protoc_insertion_point(destructor:raft.NodeInfoRequest)
  SharedDtor();
}

void NodeInfoRequest::SharedDtor() {
}

void NodeInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfoRequest& NodeInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfoRequest_message_2eproto.base);
  return *internal_default_instance();
}


void NodeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.NodeInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_handle_.Clear();
  _internal_metadata_.Clear();
}

const char* NodeInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string net_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_net_handle();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.NodeInfoRequest.net_handle"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.NodeInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string net_handle = 1;
  for (int i = 0, n = this->_internal_net_handle_size(); i < n; i++) {
    const auto& s = this->_internal_net_handle(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.NodeInfoRequest.net_handle");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.NodeInfoRequest)
  return target;
}

size_t NodeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.NodeInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string net_handle = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(net_handle_.size());
  for (int i = 0, n = net_handle_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      net_handle_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.NodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.NodeInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.NodeInfoRequest)
    MergeFrom(*source);
  }
}

void NodeInfoRequest::MergeFrom(const NodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.NodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  net_handle_.MergeFrom(from.net_handle_);
}

void NodeInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.NodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoRequest::CopyFrom(const NodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.NodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoRequest::IsInitialized() const {
  return true;
}

void NodeInfoRequest::InternalSwap(NodeInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_handle_.InternalSwap(&other->net_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfoResponse::InitAsDefaultInstance() {
}
class NodeInfoResponse::_Internal {
 public:
};

NodeInfoResponse::NodeInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.NodeInfoResponse)
}
NodeInfoResponse::NodeInfoResponse(const NodeInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      net_handle_(from.net_handle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft.NodeInfoResponse)
}

void NodeInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfoResponse_message_2eproto.base);
}

NodeInfoResponse::~NodeInfoResponse() {
  // @@protoc_insertion_point(destructor:raft.NodeInfoResponse)
  SharedDtor();
}

void NodeInfoResponse::SharedDtor() {
}

void NodeInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfoResponse& NodeInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfoResponse_message_2eproto.base);
  return *internal_default_instance();
}


void NodeInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.NodeInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_handle_.Clear();
  _internal_metadata_.Clear();
}

const char* NodeInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string net_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_net_handle();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.NodeInfoResponse.net_handle"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.NodeInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string net_handle = 1;
  for (int i = 0, n = this->_internal_net_handle_size(); i < n; i++) {
    const auto& s = this->_internal_net_handle(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.NodeInfoResponse.net_handle");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.NodeInfoResponse)
  return target;
}

size_t NodeInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.NodeInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string net_handle = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(net_handle_.size());
  for (int i = 0, n = net_handle_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      net_handle_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.NodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.NodeInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.NodeInfoResponse)
    MergeFrom(*source);
  }
}

void NodeInfoResponse::MergeFrom(const NodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.NodeInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  net_handle_.MergeFrom(from.net_handle_);
}

void NodeInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.NodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoResponse::CopyFrom(const NodeInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.NodeInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoResponse::IsInitialized() const {
  return true;
}

void NodeInfoResponse::InternalSwap(NodeInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_handle_.InternalSwap(&other->net_handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntriesResponse::InitAsDefaultInstance() {
}
class EntriesResponse::_Internal {
 public:
};

EntriesResponse::EntriesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.EntriesResponse)
}
EntriesResponse::EntriesResponse(const EntriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leader_net_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_leader_net_handle().empty()) {
    leader_net_handle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_net_handle_);
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:raft.EntriesResponse)
}

void EntriesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntriesResponse_message_2eproto.base);
  leader_net_handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

EntriesResponse::~EntriesResponse() {
  // @@protoc_insertion_point(destructor:raft.EntriesResponse)
  SharedDtor();
}

void EntriesResponse::SharedDtor() {
  leader_net_handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntriesResponse& EntriesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntriesResponse_message_2eproto.base);
  return *internal_default_instance();
}


void EntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.EntriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leader_net_handle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
  _internal_metadata_.Clear();
}

const char* EntriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .raft.CLIENT_RES_CODE ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ret_code(static_cast<::raft::CLIENT_RES_CODE>(val));
        } else goto handle_unusual;
        continue;
      // string leader_net_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leader_net_handle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.EntriesResponse.leader_net_handle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.EntriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.CLIENT_RES_CODE ret_code = 1;
  if (this->ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ret_code(), target);
  }

  // string leader_net_handle = 2;
  if (this->leader_net_handle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_leader_net_handle().data(), static_cast<int>(this->_internal_leader_net_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.EntriesResponse.leader_net_handle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leader_net_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.EntriesResponse)
  return target;
}

size_t EntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.EntriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string leader_net_handle = 2;
  if (this->leader_net_handle().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leader_net_handle());
  }

  // .raft.CLIENT_RES_CODE ret_code = 1;
  if (this->ret_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ret_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntriesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.EntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EntriesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntriesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.EntriesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.EntriesResponse)
    MergeFrom(*source);
  }
}

void EntriesResponse::MergeFrom(const EntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.EntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.leader_net_handle().size() > 0) {

    leader_net_handle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leader_net_handle_);
  }
  if (from.ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
}

void EntriesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.EntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntriesResponse::CopyFrom(const EntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.EntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntriesResponse::IsInitialized() const {
  return true;
}

void EntriesResponse::InternalSwap(EntriesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  leader_net_handle_.Swap(&other->leader_net_handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntriesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RaftService::~RaftService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RaftService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_service_descriptors_message_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RaftService::GetDescriptor() {
  return descriptor();
}

void RaftService::RpcHeart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raft::HeartBeatResquest*,
                         ::raft::HeartBeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RpcHeart() not implemented.");
  done->Run();
}

void RaftService::RpcVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raft::VoteRequest*,
                         ::raft::VoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RpcVote() not implemented.");
  done->Run();
}

void RaftService::RpcNodeInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raft::NodeInfoRequest*,
                         ::raft::NodeInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RpcNodeInfo() not implemented.");
  done->Run();
}

void RaftService::RpcClientMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raft::EntriesRequest*,
                         ::raft::EntriesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RpcClientMsg() not implemented.");
  done->Run();
}

void RaftService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_message_2eproto[0]);
  switch(method->index()) {
    case 0:
      RpcHeart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raft::HeartBeatResquest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raft::HeartBeatResponse*>(
                 response),
             done);
      break;
    case 1:
      RpcVote(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raft::VoteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raft::VoteResponse*>(
                 response),
             done);
      break;
    case 2:
      RpcNodeInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raft::NodeInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raft::NodeInfoResponse*>(
                 response),
             done);
      break;
    case 3:
      RpcClientMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raft::EntriesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raft::EntriesResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RaftService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft::HeartBeatResquest::default_instance();
    case 1:
      return ::raft::VoteRequest::default_instance();
    case 2:
      return ::raft::NodeInfoRequest::default_instance();
    case 3:
      return ::raft::EntriesRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RaftService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft::HeartBeatResponse::default_instance();
    case 1:
      return ::raft::VoteResponse::default_instance();
    case 2:
      return ::raft::NodeInfoResponse::default_instance();
    case 3:
      return ::raft::EntriesResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RaftService_Stub::RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftService_Stub::RaftService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RaftService_Stub::~RaftService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftService_Stub::RpcHeart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raft::HeartBeatResquest* request,
                              ::raft::HeartBeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftService_Stub::RpcVote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raft::VoteRequest* request,
                              ::raft::VoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftService_Stub::RpcNodeInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raft::NodeInfoRequest* request,
                              ::raft::NodeInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void RaftService_Stub::RpcClientMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raft::EntriesRequest* request,
                              ::raft::EntriesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::HeartBeatResquest* Arena::CreateMaybeMessage< ::raft::HeartBeatResquest >(Arena* arena) {
  return Arena::CreateInternal< ::raft::HeartBeatResquest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::HeartBeatResponse* Arena::CreateMaybeMessage< ::raft::HeartBeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft::HeartBeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::VoteRequest* Arena::CreateMaybeMessage< ::raft::VoteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft::VoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::VoteResponse* Arena::CreateMaybeMessage< ::raft::VoteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft::VoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::EntriesRequest* Arena::CreateMaybeMessage< ::raft::EntriesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft::EntriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::NodeInfoRequest* Arena::CreateMaybeMessage< ::raft::NodeInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft::NodeInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::NodeInfoResponse* Arena::CreateMaybeMessage< ::raft::NodeInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft::NodeInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::EntriesResponse* Arena::CreateMaybeMessage< ::raft::EntriesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft::EntriesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
