// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_rpc.proto

#ifndef PROTOBUF_raft_5frpc_2eproto__INCLUDED
#define PROTOBUF_raft_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace raft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_5frpc_2eproto();
void protobuf_AssignDesc_raft_5frpc_2eproto();
void protobuf_ShutdownFile_raft_5frpc_2eproto();

class HeartRequest;
class HeartResponse;
class VoteResuest;
class VoteResponse;
class NodeInfoRequest;
class NodeInfoResponse;

// ===================================================================

class HeartRequest : public ::google::protobuf::Message {
 public:
  HeartRequest();
  virtual ~HeartRequest();

  HeartRequest(const HeartRequest& from);

  inline HeartRequest& operator=(const HeartRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartRequest& default_instance();

  void Swap(HeartRequest* other);

  // implements Message ----------------------------------------------

  HeartRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartRequest& from);
  void MergeFrom(const HeartRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string local_ip = 1;
  inline bool has_local_ip() const;
  inline void clear_local_ip();
  static const int kLocalIpFieldNumber = 1;
  inline const ::std::string& local_ip() const;
  inline void set_local_ip(const ::std::string& value);
  inline void set_local_ip(const char* value);
  inline void set_local_ip(const char* value, size_t size);
  inline ::std::string* mutable_local_ip();
  inline ::std::string* release_local_ip();
  inline void set_allocated_local_ip(::std::string* local_ip);

  // required sfixed64 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);

  // repeated string msg = 3;
  inline int msg_size() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg(int index) const;
  inline ::std::string* mutable_msg(int index);
  inline void set_msg(int index, const ::std::string& value);
  inline void set_msg(int index, const char* value);
  inline void set_msg(int index, const char* value, size_t size);
  inline ::std::string* add_msg();
  inline void add_msg(const ::std::string& value);
  inline void add_msg(const char* value);
  inline void add_msg(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msg() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msg();

  // optional bool done_msg = 4;
  inline bool has_done_msg() const;
  inline void clear_done_msg();
  static const int kDoneMsgFieldNumber = 4;
  inline bool done_msg() const;
  inline void set_done_msg(bool value);

  // @@protoc_insertion_point(class_scope:raft.HeartRequest)
 private:
  inline void set_has_local_ip();
  inline void clear_has_local_ip();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_done_msg();
  inline void clear_has_done_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* local_ip_;
  ::google::protobuf::int64 version_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msg_;
  bool done_msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_raft_5frpc_2eproto();
  friend void protobuf_AssignDesc_raft_5frpc_2eproto();
  friend void protobuf_ShutdownFile_raft_5frpc_2eproto();

  void InitAsDefaultInstance();
  static HeartRequest* default_instance_;
};
// -------------------------------------------------------------------

class HeartResponse : public ::google::protobuf::Message {
 public:
  HeartResponse();
  virtual ~HeartResponse();

  HeartResponse(const HeartResponse& from);

  inline HeartResponse& operator=(const HeartResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartResponse& default_instance();

  void Swap(HeartResponse* other);

  // implements Message ----------------------------------------------

  HeartResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartResponse& from);
  void MergeFrom(const HeartResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed64 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:raft.HeartResponse)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_raft_5frpc_2eproto();
  friend void protobuf_AssignDesc_raft_5frpc_2eproto();
  friend void protobuf_ShutdownFile_raft_5frpc_2eproto();

  void InitAsDefaultInstance();
  static HeartResponse* default_instance_;
};
// -------------------------------------------------------------------

class VoteResuest : public ::google::protobuf::Message {
 public:
  VoteResuest();
  virtual ~VoteResuest();

  VoteResuest(const VoteResuest& from);

  inline VoteResuest& operator=(const VoteResuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResuest& default_instance();

  void Swap(VoteResuest* other);

  // implements Message ----------------------------------------------

  VoteResuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteResuest& from);
  void MergeFrom(const VoteResuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string local_ip = 1;
  inline bool has_local_ip() const;
  inline void clear_local_ip();
  static const int kLocalIpFieldNumber = 1;
  inline const ::std::string& local_ip() const;
  inline void set_local_ip(const ::std::string& value);
  inline void set_local_ip(const char* value);
  inline void set_local_ip(const char* value, size_t size);
  inline ::std::string* mutable_local_ip();
  inline ::std::string* release_local_ip();
  inline void set_allocated_local_ip(::std::string* local_ip);

  // required sfixed64 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int64 version() const;
  inline void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:raft.VoteResuest)
 private:
  inline void set_has_local_ip();
  inline void clear_has_local_ip();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* local_ip_;
  ::google::protobuf::int64 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_raft_5frpc_2eproto();
  friend void protobuf_AssignDesc_raft_5frpc_2eproto();
  friend void protobuf_ShutdownFile_raft_5frpc_2eproto();

  void InitAsDefaultInstance();
  static VoteResuest* default_instance_;
};
// -------------------------------------------------------------------

class VoteResponse : public ::google::protobuf::Message {
 public:
  VoteResponse();
  virtual ~VoteResponse();

  VoteResponse(const VoteResponse& from);

  inline VoteResponse& operator=(const VoteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse& default_instance();

  void Swap(VoteResponse* other);

  // implements Message ----------------------------------------------

  VoteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteResponse& from);
  void MergeFrom(const VoteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool vote = 1;
  inline bool has_vote() const;
  inline void clear_vote();
  static const int kVoteFieldNumber = 1;
  inline bool vote() const;
  inline void set_vote(bool value);

  // @@protoc_insertion_point(class_scope:raft.VoteResponse)
 private:
  inline void set_has_vote();
  inline void clear_has_vote();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool vote_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_raft_5frpc_2eproto();
  friend void protobuf_AssignDesc_raft_5frpc_2eproto();
  friend void protobuf_ShutdownFile_raft_5frpc_2eproto();

  void InitAsDefaultInstance();
  static VoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class NodeInfoRequest : public ::google::protobuf::Message {
 public:
  NodeInfoRequest();
  virtual ~NodeInfoRequest();

  NodeInfoRequest(const NodeInfoRequest& from);

  inline NodeInfoRequest& operator=(const NodeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfoRequest& default_instance();

  void Swap(NodeInfoRequest* other);

  // implements Message ----------------------------------------------

  NodeInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfoRequest& from);
  void MergeFrom(const NodeInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string local_ip = 1;
  inline bool has_local_ip() const;
  inline void clear_local_ip();
  static const int kLocalIpFieldNumber = 1;
  inline const ::std::string& local_ip() const;
  inline void set_local_ip(const ::std::string& value);
  inline void set_local_ip(const char* value);
  inline void set_local_ip(const char* value, size_t size);
  inline ::std::string* mutable_local_ip();
  inline ::std::string* release_local_ip();
  inline void set_allocated_local_ip(::std::string* local_ip);

  // repeated string ip_port = 2;
  inline int ip_port_size() const;
  inline void clear_ip_port();
  static const int kIpPortFieldNumber = 2;
  inline const ::std::string& ip_port(int index) const;
  inline ::std::string* mutable_ip_port(int index);
  inline void set_ip_port(int index, const ::std::string& value);
  inline void set_ip_port(int index, const char* value);
  inline void set_ip_port(int index, const char* value, size_t size);
  inline ::std::string* add_ip_port();
  inline void add_ip_port(const ::std::string& value);
  inline void add_ip_port(const char* value);
  inline void add_ip_port(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ip_port() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ip_port();

  // @@protoc_insertion_point(class_scope:raft.NodeInfoRequest)
 private:
  inline void set_has_local_ip();
  inline void clear_has_local_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* local_ip_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ip_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_raft_5frpc_2eproto();
  friend void protobuf_AssignDesc_raft_5frpc_2eproto();
  friend void protobuf_ShutdownFile_raft_5frpc_2eproto();

  void InitAsDefaultInstance();
  static NodeInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeInfoResponse : public ::google::protobuf::Message {
 public:
  NodeInfoResponse();
  virtual ~NodeInfoResponse();

  NodeInfoResponse(const NodeInfoResponse& from);

  inline NodeInfoResponse& operator=(const NodeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfoResponse& default_instance();

  void Swap(NodeInfoResponse* other);

  // implements Message ----------------------------------------------

  NodeInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfoResponse& from);
  void MergeFrom(const NodeInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ip_port = 1;
  inline int ip_port_size() const;
  inline void clear_ip_port();
  static const int kIpPortFieldNumber = 1;
  inline const ::std::string& ip_port(int index) const;
  inline ::std::string* mutable_ip_port(int index);
  inline void set_ip_port(int index, const ::std::string& value);
  inline void set_ip_port(int index, const char* value);
  inline void set_ip_port(int index, const char* value, size_t size);
  inline ::std::string* add_ip_port();
  inline void add_ip_port(const ::std::string& value);
  inline void add_ip_port(const char* value);
  inline void add_ip_port(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ip_port() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ip_port();

  // @@protoc_insertion_point(class_scope:raft.NodeInfoResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> ip_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_raft_5frpc_2eproto();
  friend void protobuf_AssignDesc_raft_5frpc_2eproto();
  friend void protobuf_ShutdownFile_raft_5frpc_2eproto();

  void InitAsDefaultInstance();
  static NodeInfoResponse* default_instance_;
};
// ===================================================================

class RaftService_Stub;

class RaftService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftService() {};
 public:
  virtual ~RaftService();

  typedef RaftService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void rpc_heart(::google::protobuf::RpcController* controller,
                       const ::raft::HeartRequest* request,
                       ::raft::HeartResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void rpc_vote(::google::protobuf::RpcController* controller,
                       const ::raft::VoteResuest* request,
                       ::raft::VoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void rpc_node_info(::google::protobuf::RpcController* controller,
                       const ::raft::NodeInfoRequest* request,
                       ::raft::NodeInfoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService);
};

class RaftService_Stub : public RaftService {
 public:
  RaftService_Stub(::google::protobuf::RpcChannel* channel);
  RaftService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RaftService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RaftService ------------------------------------------

  void rpc_heart(::google::protobuf::RpcController* controller,
                       const ::raft::HeartRequest* request,
                       ::raft::HeartResponse* response,
                       ::google::protobuf::Closure* done);
  void rpc_vote(::google::protobuf::RpcController* controller,
                       const ::raft::VoteResuest* request,
                       ::raft::VoteResponse* response,
                       ::google::protobuf::Closure* done);
  void rpc_node_info(::google::protobuf::RpcController* controller,
                       const ::raft::NodeInfoRequest* request,
                       ::raft::NodeInfoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService_Stub);
};


// ===================================================================


// ===================================================================

// HeartRequest

// required string local_ip = 1;
inline bool HeartRequest::has_local_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartRequest::set_has_local_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartRequest::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartRequest::clear_local_ip() {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    local_ip_->clear();
  }
  clear_has_local_ip();
}
inline const ::std::string& HeartRequest::local_ip() const {
  return *local_ip_;
}
inline void HeartRequest::set_local_ip(const ::std::string& value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void HeartRequest::set_local_ip(const char* value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void HeartRequest::set_local_ip(const char* value, size_t size) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeartRequest::mutable_local_ip() {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  return local_ip_;
}
inline ::std::string* HeartRequest::release_local_ip() {
  clear_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_ip_;
    local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeartRequest::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete local_ip_;
  }
  if (local_ip) {
    set_has_local_ip();
    local_ip_ = local_ip;
  } else {
    clear_has_local_ip();
    local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sfixed64 version = 2;
inline bool HeartRequest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartRequest::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartRequest::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 HeartRequest::version() const {
  return version_;
}
inline void HeartRequest::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
}

// repeated string msg = 3;
inline int HeartRequest::msg_size() const {
  return msg_.size();
}
inline void HeartRequest::clear_msg() {
  msg_.Clear();
}
inline const ::std::string& HeartRequest::msg(int index) const {
  return msg_.Get(index);
}
inline ::std::string* HeartRequest::mutable_msg(int index) {
  return msg_.Mutable(index);
}
inline void HeartRequest::set_msg(int index, const ::std::string& value) {
  msg_.Mutable(index)->assign(value);
}
inline void HeartRequest::set_msg(int index, const char* value) {
  msg_.Mutable(index)->assign(value);
}
inline void HeartRequest::set_msg(int index, const char* value, size_t size) {
  msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeartRequest::add_msg() {
  return msg_.Add();
}
inline void HeartRequest::add_msg(const ::std::string& value) {
  msg_.Add()->assign(value);
}
inline void HeartRequest::add_msg(const char* value) {
  msg_.Add()->assign(value);
}
inline void HeartRequest::add_msg(const char* value, size_t size) {
  msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeartRequest::msg() const {
  return msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeartRequest::mutable_msg() {
  return &msg_;
}

// optional bool done_msg = 4;
inline bool HeartRequest::has_done_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeartRequest::set_has_done_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeartRequest::clear_has_done_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeartRequest::clear_done_msg() {
  done_msg_ = false;
  clear_has_done_msg();
}
inline bool HeartRequest::done_msg() const {
  return done_msg_;
}
inline void HeartRequest::set_done_msg(bool value) {
  set_has_done_msg();
  done_msg_ = value;
}

// -------------------------------------------------------------------

// HeartResponse

// required sfixed64 version = 1;
inline bool HeartResponse::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartResponse::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartResponse::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 HeartResponse::version() const {
  return version_;
}
inline void HeartResponse::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// VoteResuest

// required string local_ip = 1;
inline bool VoteResuest::has_local_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteResuest::set_has_local_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteResuest::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteResuest::clear_local_ip() {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    local_ip_->clear();
  }
  clear_has_local_ip();
}
inline const ::std::string& VoteResuest::local_ip() const {
  return *local_ip_;
}
inline void VoteResuest::set_local_ip(const ::std::string& value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void VoteResuest::set_local_ip(const char* value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void VoteResuest::set_local_ip(const char* value, size_t size) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VoteResuest::mutable_local_ip() {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  return local_ip_;
}
inline ::std::string* VoteResuest::release_local_ip() {
  clear_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_ip_;
    local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VoteResuest::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete local_ip_;
  }
  if (local_ip) {
    set_has_local_ip();
    local_ip_ = local_ip;
  } else {
    clear_has_local_ip();
    local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sfixed64 version = 2;
inline bool VoteResuest::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteResuest::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteResuest::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteResuest::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::int64 VoteResuest::version() const {
  return version_;
}
inline void VoteResuest::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// VoteResponse

// required bool vote = 1;
inline bool VoteResponse::has_vote() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteResponse::set_has_vote() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteResponse::clear_has_vote() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteResponse::clear_vote() {
  vote_ = false;
  clear_has_vote();
}
inline bool VoteResponse::vote() const {
  return vote_;
}
inline void VoteResponse::set_vote(bool value) {
  set_has_vote();
  vote_ = value;
}

// -------------------------------------------------------------------

// NodeInfoRequest

// required string local_ip = 1;
inline bool NodeInfoRequest::has_local_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfoRequest::set_has_local_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfoRequest::clear_has_local_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfoRequest::clear_local_ip() {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    local_ip_->clear();
  }
  clear_has_local_ip();
}
inline const ::std::string& NodeInfoRequest::local_ip() const {
  return *local_ip_;
}
inline void NodeInfoRequest::set_local_ip(const ::std::string& value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void NodeInfoRequest::set_local_ip(const char* value) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(value);
}
inline void NodeInfoRequest::set_local_ip(const char* value, size_t size) {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  local_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfoRequest::mutable_local_ip() {
  set_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    local_ip_ = new ::std::string;
  }
  return local_ip_;
}
inline ::std::string* NodeInfoRequest::release_local_ip() {
  clear_has_local_ip();
  if (local_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_ip_;
    local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeInfoRequest::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete local_ip_;
  }
  if (local_ip) {
    set_has_local_ip();
    local_ip_ = local_ip;
  } else {
    clear_has_local_ip();
    local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string ip_port = 2;
inline int NodeInfoRequest::ip_port_size() const {
  return ip_port_.size();
}
inline void NodeInfoRequest::clear_ip_port() {
  ip_port_.Clear();
}
inline const ::std::string& NodeInfoRequest::ip_port(int index) const {
  return ip_port_.Get(index);
}
inline ::std::string* NodeInfoRequest::mutable_ip_port(int index) {
  return ip_port_.Mutable(index);
}
inline void NodeInfoRequest::set_ip_port(int index, const ::std::string& value) {
  ip_port_.Mutable(index)->assign(value);
}
inline void NodeInfoRequest::set_ip_port(int index, const char* value) {
  ip_port_.Mutable(index)->assign(value);
}
inline void NodeInfoRequest::set_ip_port(int index, const char* value, size_t size) {
  ip_port_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfoRequest::add_ip_port() {
  return ip_port_.Add();
}
inline void NodeInfoRequest::add_ip_port(const ::std::string& value) {
  ip_port_.Add()->assign(value);
}
inline void NodeInfoRequest::add_ip_port(const char* value) {
  ip_port_.Add()->assign(value);
}
inline void NodeInfoRequest::add_ip_port(const char* value, size_t size) {
  ip_port_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeInfoRequest::ip_port() const {
  return ip_port_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeInfoRequest::mutable_ip_port() {
  return &ip_port_;
}

// -------------------------------------------------------------------

// NodeInfoResponse

// repeated string ip_port = 1;
inline int NodeInfoResponse::ip_port_size() const {
  return ip_port_.size();
}
inline void NodeInfoResponse::clear_ip_port() {
  ip_port_.Clear();
}
inline const ::std::string& NodeInfoResponse::ip_port(int index) const {
  return ip_port_.Get(index);
}
inline ::std::string* NodeInfoResponse::mutable_ip_port(int index) {
  return ip_port_.Mutable(index);
}
inline void NodeInfoResponse::set_ip_port(int index, const ::std::string& value) {
  ip_port_.Mutable(index)->assign(value);
}
inline void NodeInfoResponse::set_ip_port(int index, const char* value) {
  ip_port_.Mutable(index)->assign(value);
}
inline void NodeInfoResponse::set_ip_port(int index, const char* value, size_t size) {
  ip_port_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfoResponse::add_ip_port() {
  return ip_port_.Add();
}
inline void NodeInfoResponse::add_ip_port(const ::std::string& value) {
  ip_port_.Add()->assign(value);
}
inline void NodeInfoResponse::add_ip_port(const char* value) {
  ip_port_.Add()->assign(value);
}
inline void NodeInfoResponse::add_ip_port(const char* value, size_t size) {
  ip_port_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeInfoResponse::ip_port() const {
  return ip_port_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeInfoResponse::mutable_ip_port() {
  return &ip_port_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_5frpc_2eproto__INCLUDED
