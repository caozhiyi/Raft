syntax = 'proto3';
package raft;

option cc_generic_services = true;

message HeartBeatResquest {
    uint32 term                = 1;    // leader's term.
    uint32 leader_id           = 2;    // leader's id, so followsers can redirect clients.
    uint64 prev_log_index      = 3;    // the snapshort replaces all entries no through and includeing this index.
    uint32 prev_log_term       = 4;    // term of last include index.
    repeated string entries    = 5;    // to add logs.
    uint64 leader_commit       = 6;    // leader added log index. 
}

message HeartBeatResponse {
    uint32 term                = 1;    // now leader's term.
    bool success               = 2;    // add success?
	uint64 next_index		   = 3;	   // the node next index
}

message VoteRequest {
    uint32 term                = 1;    // candidate's term.
    uint32 candidate_id        = 2;    // candidate's id.
    uint64 last_index          = 3;    // candidate last log index.
    uint32 last_term           = 4;    // candidate last log term.
}

message VoteResponse {
    uint32 term                = 1;    // now leader's term.
    bool vote_granted          = 2;    // is vote?
}

message ClientRequest {
    string entries             = 1;    // commit entries.
}

message NodeInfoRequest {
	repeated string net_handle = 1;    // all node net address
}

message NodeInfoResponse {
	repeated string net_handle = 1;    // all node net address
}


enum CLIENT_RES_CODE {
    success                    = 0;
    not_leader                 = 1;
    other_error                = 2;
    send_again                 = 3;    // now don't have a leader, client try again a minute after
}

message ClientResponse {
    CLIENT_RES_CODE ret_code = 1;      // return code
    string leader_net_handle = 2;      // leader net handle  
}

service RaftService {

    rpc RpcHeart(HeartBeatResquest) returns (HeartBeatResponse);

    rpc RpcVote(VoteRequest) returns (VoteResponse);

    rpc RpcNodeInfo(NodeInfoRequest) returns (NodeInfoResponse);

	rpc RpcClientMsg(ClientRequest) returns (ClientResponse);
};