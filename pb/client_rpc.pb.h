// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_rpc.proto

#ifndef PROTOBUF_client_5frpc_2eproto__INCLUDED
#define PROTOBUF_client_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace raft {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_5frpc_2eproto();
void protobuf_AssignDesc_client_5frpc_2eproto();
void protobuf_ShutdownFile_client_5frpc_2eproto();

class ClientRequest;
class ClientResponse;

// ===================================================================

class ClientRequest : public ::google::protobuf::Message {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  void Swap(ClientRequest* other);

  // implements Message ----------------------------------------------

  ClientRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:raft.ClientRequest)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_5frpc_2eproto();
  friend void protobuf_AssignDesc_client_5frpc_2eproto();
  friend void protobuf_ShutdownFile_client_5frpc_2eproto();

  void InitAsDefaultInstance();
  static ClientRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClientResponse : public ::google::protobuf::Message {
 public:
  ClientResponse();
  virtual ~ClientResponse();

  ClientResponse(const ClientResponse& from);

  inline ClientResponse& operator=(const ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientResponse& default_instance();

  void Swap(ClientResponse* other);

  // implements Message ----------------------------------------------

  ClientResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientResponse& from);
  void MergeFrom(const ClientResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 err_code = 1;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  inline ::google::protobuf::int32 err_code() const;
  inline void set_err_code(::google::protobuf::int32 value);

  // optional string des = 2;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 2;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional string leader_ip = 3;
  inline bool has_leader_ip() const;
  inline void clear_leader_ip();
  static const int kLeaderIpFieldNumber = 3;
  inline const ::std::string& leader_ip() const;
  inline void set_leader_ip(const ::std::string& value);
  inline void set_leader_ip(const char* value);
  inline void set_leader_ip(const char* value, size_t size);
  inline ::std::string* mutable_leader_ip();
  inline ::std::string* release_leader_ip();
  inline void set_allocated_leader_ip(::std::string* leader_ip);

  // optional string msg = 4;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 4;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:raft.ClientResponse)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_leader_ip();
  inline void clear_has_leader_ip();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* des_;
  ::std::string* leader_ip_;
  ::std::string* msg_;
  ::google::protobuf::int32 err_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_client_5frpc_2eproto();
  friend void protobuf_AssignDesc_client_5frpc_2eproto();
  friend void protobuf_ShutdownFile_client_5frpc_2eproto();

  void InitAsDefaultInstance();
  static ClientResponse* default_instance_;
};
// ===================================================================

class ClientService_Stub;

class ClientService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ClientService() {};
 public:
  virtual ~ClientService();

  typedef ClientService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void client_msg(::google::protobuf::RpcController* controller,
                       const ::raft::ClientRequest* request,
                       ::raft::ClientResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientService);
};

class ClientService_Stub : public ClientService {
 public:
  ClientService_Stub(::google::protobuf::RpcChannel* channel);
  ClientService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ClientService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ClientService ------------------------------------------

  void client_msg(::google::protobuf::RpcController* controller,
                       const ::raft::ClientRequest* request,
                       ::raft::ClientResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientService_Stub);
};


// ===================================================================


// ===================================================================

// ClientRequest

// required string msg = 1;
inline bool ClientRequest::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientRequest::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientRequest::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientRequest::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ClientRequest::msg() const {
  return *msg_;
}
inline void ClientRequest::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ClientRequest::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ClientRequest::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientRequest::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* ClientRequest::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientRequest::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientResponse

// required int32 err_code = 1;
inline bool ClientResponse::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientResponse::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientResponse::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientResponse::clear_err_code() {
  err_code_ = 0;
  clear_has_err_code();
}
inline ::google::protobuf::int32 ClientResponse::err_code() const {
  return err_code_;
}
inline void ClientResponse::set_err_code(::google::protobuf::int32 value) {
  set_has_err_code();
  err_code_ = value;
}

// optional string des = 2;
inline bool ClientResponse::has_des() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientResponse::set_has_des() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientResponse::clear_has_des() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientResponse::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& ClientResponse::des() const {
  return *des_;
}
inline void ClientResponse::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void ClientResponse::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void ClientResponse::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientResponse::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* ClientResponse::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientResponse::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string leader_ip = 3;
inline bool ClientResponse::has_leader_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientResponse::set_has_leader_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientResponse::clear_has_leader_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientResponse::clear_leader_ip() {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    leader_ip_->clear();
  }
  clear_has_leader_ip();
}
inline const ::std::string& ClientResponse::leader_ip() const {
  return *leader_ip_;
}
inline void ClientResponse::set_leader_ip(const ::std::string& value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void ClientResponse::set_leader_ip(const char* value) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(value);
}
inline void ClientResponse::set_leader_ip(const char* value, size_t size) {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  leader_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientResponse::mutable_leader_ip() {
  set_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    leader_ip_ = new ::std::string;
  }
  return leader_ip_;
}
inline ::std::string* ClientResponse::release_leader_ip() {
  clear_has_leader_ip();
  if (leader_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_ip_;
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientResponse::set_allocated_leader_ip(::std::string* leader_ip) {
  if (leader_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_ip_;
  }
  if (leader_ip) {
    set_has_leader_ip();
    leader_ip_ = leader_ip;
  } else {
    clear_has_leader_ip();
    leader_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 4;
inline bool ClientResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ClientResponse::msg() const {
  return *msg_;
}
inline void ClientResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ClientResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ClientResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* ClientResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5frpc_2eproto__INCLUDED
