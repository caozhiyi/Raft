// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft {

namespace {

const ::google::protobuf::Descriptor* HeartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteResuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteResuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfoResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* RaftService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_5frpc_2eproto() {
  protobuf_AddDesc_raft_5frpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft_rpc.proto");
  GOOGLE_CHECK(file != NULL);
  HeartRequest_descriptor_ = file->message_type(0);
  static const int HeartRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, local_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, done_msg_),
  };
  HeartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartRequest_descriptor_,
      HeartRequest::default_instance_,
      HeartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartRequest));
  HeartResponse_descriptor_ = file->message_type(1);
  static const int HeartResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartResponse, version_),
  };
  HeartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartResponse_descriptor_,
      HeartResponse::default_instance_,
      HeartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartResponse));
  VoteResuest_descriptor_ = file->message_type(2);
  static const int VoteResuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResuest, local_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResuest, version_),
  };
  VoteResuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteResuest_descriptor_,
      VoteResuest::default_instance_,
      VoteResuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteResuest));
  VoteResponse_descriptor_ = file->message_type(3);
  static const int VoteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponse, vote_),
  };
  VoteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteResponse_descriptor_,
      VoteResponse::default_instance_,
      VoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteResponse));
  NodeInfoRequest_descriptor_ = file->message_type(4);
  static const int NodeInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoRequest, local_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoRequest, ip_port_),
  };
  NodeInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfoRequest_descriptor_,
      NodeInfoRequest::default_instance_,
      NodeInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfoRequest));
  NodeInfoResponse_descriptor_ = file->message_type(5);
  static const int NodeInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, ip_port_),
  };
  NodeInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeInfoResponse_descriptor_,
      NodeInfoResponse::default_instance_,
      NodeInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeInfoResponse));
  RaftService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_5frpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartRequest_descriptor_, &HeartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartResponse_descriptor_, &HeartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteResuest_descriptor_, &VoteResuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteResponse_descriptor_, &VoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfoRequest_descriptor_, &NodeInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeInfoResponse_descriptor_, &NodeInfoResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5frpc_2eproto() {
  delete HeartRequest::default_instance_;
  delete HeartRequest_reflection_;
  delete HeartResponse::default_instance_;
  delete HeartResponse_reflection_;
  delete VoteResuest::default_instance_;
  delete VoteResuest_reflection_;
  delete VoteResponse::default_instance_;
  delete VoteResponse_reflection_;
  delete NodeInfoRequest::default_instance_;
  delete NodeInfoRequest_reflection_;
  delete NodeInfoResponse::default_instance_;
  delete NodeInfoResponse_reflection_;
}

void protobuf_AddDesc_raft_5frpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016raft_rpc.proto\022\004raft\"P\n\014HeartRequest\022\020"
    "\n\010local_ip\030\001 \002(\t\022\017\n\007version\030\002 \002(\020\022\013\n\003msg"
    "\030\003 \003(\t\022\020\n\010done_msg\030\004 \001(\010\" \n\rHeartRespons"
    "e\022\017\n\007version\030\001 \002(\020\"0\n\013VoteResuest\022\020\n\010loc"
    "al_ip\030\001 \002(\t\022\017\n\007version\030\002 \002(\020\"\034\n\014VoteResp"
    "onse\022\014\n\004vote\030\001 \002(\010\"4\n\017NodeInfoRequest\022\020\n"
    "\010local_ip\030\001 \002(\t\022\017\n\007ip_port\030\002 \003(\t\"#\n\020Node"
    "InfoResponse\022\017\n\007ip_port\030\001 \003(\t2\266\001\n\013RaftSe"
    "rvice\0224\n\trpc_heart\022\022.raft.HeartRequest\032\023"
    ".raft.HeartResponse\0221\n\010rpc_vote\022\021.raft.V"
    "oteResuest\032\022.raft.VoteResponse\022>\n\rrpc_no"
    "de_info\022\025.raft.NodeInfoRequest\032\026.raft.No"
    "deInfoResponseB\003\200\001\001", 499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_rpc.proto", &protobuf_RegisterTypes);
  HeartRequest::default_instance_ = new HeartRequest();
  HeartResponse::default_instance_ = new HeartResponse();
  VoteResuest::default_instance_ = new VoteResuest();
  VoteResponse::default_instance_ = new VoteResponse();
  NodeInfoRequest::default_instance_ = new NodeInfoRequest();
  NodeInfoResponse::default_instance_ = new NodeInfoResponse();
  HeartRequest::default_instance_->InitAsDefaultInstance();
  HeartResponse::default_instance_->InitAsDefaultInstance();
  VoteResuest::default_instance_->InitAsDefaultInstance();
  VoteResponse::default_instance_->InitAsDefaultInstance();
  NodeInfoRequest::default_instance_->InitAsDefaultInstance();
  NodeInfoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5frpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5frpc_2eproto {
  StaticDescriptorInitializer_raft_5frpc_2eproto() {
    protobuf_AddDesc_raft_5frpc_2eproto();
  }
} static_descriptor_initializer_raft_5frpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeartRequest::kLocalIpFieldNumber;
const int HeartRequest::kVersionFieldNumber;
const int HeartRequest::kMsgFieldNumber;
const int HeartRequest::kDoneMsgFieldNumber;
#endif  // !_MSC_VER

HeartRequest::HeartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartRequest::InitAsDefaultInstance() {
}

HeartRequest::HeartRequest(const HeartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartRequest::SharedCtor() {
  _cached_size_ = 0;
  local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_LONGLONG(0);
  done_msg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartRequest::~HeartRequest() {
  SharedDtor();
}

void HeartRequest::SharedDtor() {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete local_ip_;
  }
  if (this != default_instance_) {
  }
}

void HeartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartRequest_descriptor_;
}

const HeartRequest& HeartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5frpc_2eproto();
  return *default_instance_;
}

HeartRequest* HeartRequest::default_instance_ = NULL;

HeartRequest* HeartRequest::New() const {
  return new HeartRequest;
}

void HeartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_ip()) {
      if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
        local_ip_->clear();
      }
    }
    version_ = GOOGLE_LONGLONG(0);
    done_msg_ = false;
  }
  msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string local_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_ip().data(), this->local_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_version;
        break;
      }

      // required sfixed64 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // repeated string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg(this->msg_size() - 1).data(),
            this->msg(this->msg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        if (input->ExpectTag(32)) goto parse_done_msg;
        break;
      }

      // optional bool done_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_msg_)));
          set_has_done_msg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string local_ip = 1;
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_ip(), output);
  }

  // required sfixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->version(), output);
  }

  // repeated string msg = 3;
  for (int i = 0; i < this->msg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->msg(i).data(), this->msg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(i), output);
  }

  // optional bool done_msg = 4;
  if (has_done_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string local_ip = 1;
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_ip(), target);
  }

  // required sfixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->version(), target);
  }

  // repeated string msg = 3;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg(i).data(), this->msg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->msg(i), target);
  }

  // optional bool done_msg = 4;
  if (has_done_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string local_ip = 1;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_ip());
    }

    // required sfixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

    // optional bool done_msg = 4;
    if (has_done_msg()) {
      total_size += 1 + 1;
    }

  }
  // repeated string msg = 3;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartRequest::MergeFrom(const HeartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_ip()) {
      set_local_ip(from.local_ip());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_done_msg()) {
      set_done_msg(from.done_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartRequest::CopyFrom(const HeartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeartRequest::Swap(HeartRequest* other) {
  if (other != this) {
    std::swap(local_ip_, other->local_ip_);
    std::swap(version_, other->version_);
    msg_.Swap(&other->msg_);
    std::swap(done_msg_, other->done_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartRequest_descriptor_;
  metadata.reflection = HeartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartResponse::kVersionFieldNumber;
#endif  // !_MSC_VER

HeartResponse::HeartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartResponse::InitAsDefaultInstance() {
}

HeartResponse::HeartResponse(const HeartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartResponse::~HeartResponse() {
  SharedDtor();
}

void HeartResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartResponse_descriptor_;
}

const HeartResponse& HeartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5frpc_2eproto();
  return *default_instance_;
}

HeartResponse* HeartResponse::default_instance_ = NULL;

HeartResponse* HeartResponse::New() const {
  return new HeartResponse;
}

void HeartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed64 version = 1;
    if (has_version()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartResponse::MergeFrom(const HeartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartResponse::CopyFrom(const HeartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartResponse::Swap(HeartResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartResponse_descriptor_;
  metadata.reflection = HeartResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteResuest::kLocalIpFieldNumber;
const int VoteResuest::kVersionFieldNumber;
#endif  // !_MSC_VER

VoteResuest::VoteResuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VoteResuest::InitAsDefaultInstance() {
}

VoteResuest::VoteResuest(const VoteResuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VoteResuest::SharedCtor() {
  _cached_size_ = 0;
  local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteResuest::~VoteResuest() {
  SharedDtor();
}

void VoteResuest::SharedDtor() {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete local_ip_;
  }
  if (this != default_instance_) {
  }
}

void VoteResuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteResuest_descriptor_;
}

const VoteResuest& VoteResuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5frpc_2eproto();
  return *default_instance_;
}

VoteResuest* VoteResuest::default_instance_ = NULL;

VoteResuest* VoteResuest::New() const {
  return new VoteResuest;
}

void VoteResuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_ip()) {
      if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
        local_ip_->clear();
      }
    }
    version_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteResuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string local_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_ip().data(), this->local_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_version;
        break;
      }

      // required sfixed64 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VoteResuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string local_ip = 1;
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_ip(), output);
  }

  // required sfixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VoteResuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string local_ip = 1;
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_ip(), target);
  }

  // required sfixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VoteResuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string local_ip = 1;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_ip());
    }

    // required sfixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteResuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteResuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteResuest::MergeFrom(const VoteResuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_ip()) {
      set_local_ip(from.local_ip());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteResuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResuest::CopyFrom(const VoteResuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VoteResuest::Swap(VoteResuest* other) {
  if (other != this) {
    std::swap(local_ip_, other->local_ip_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteResuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteResuest_descriptor_;
  metadata.reflection = VoteResuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteResponse::kVoteFieldNumber;
#endif  // !_MSC_VER

VoteResponse::VoteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VoteResponse::InitAsDefaultInstance() {
}

VoteResponse::VoteResponse(const VoteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VoteResponse::SharedCtor() {
  _cached_size_ = 0;
  vote_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteResponse::~VoteResponse() {
  SharedDtor();
}

void VoteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteResponse_descriptor_;
}

const VoteResponse& VoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5frpc_2eproto();
  return *default_instance_;
}

VoteResponse* VoteResponse::default_instance_ = NULL;

VoteResponse* VoteResponse::New() const {
  return new VoteResponse;
}

void VoteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vote_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool vote = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_)));
          set_has_vote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool vote = 1;
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->vote(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool vote = 1;
  if (has_vote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->vote(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool vote = 1;
    if (has_vote()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteResponse::MergeFrom(const VoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vote()) {
      set_vote(from.vote());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResponse::CopyFrom(const VoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VoteResponse::Swap(VoteResponse* other) {
  if (other != this) {
    std::swap(vote_, other->vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteResponse_descriptor_;
  metadata.reflection = VoteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeInfoRequest::kLocalIpFieldNumber;
const int NodeInfoRequest::kIpPortFieldNumber;
#endif  // !_MSC_VER

NodeInfoRequest::NodeInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfoRequest::InitAsDefaultInstance() {
}

NodeInfoRequest::NodeInfoRequest(const NodeInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  local_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfoRequest::~NodeInfoRequest() {
  SharedDtor();
}

void NodeInfoRequest::SharedDtor() {
  if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete local_ip_;
  }
  if (this != default_instance_) {
  }
}

void NodeInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfoRequest_descriptor_;
}

const NodeInfoRequest& NodeInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5frpc_2eproto();
  return *default_instance_;
}

NodeInfoRequest* NodeInfoRequest::default_instance_ = NULL;

NodeInfoRequest* NodeInfoRequest::New() const {
  return new NodeInfoRequest;
}

void NodeInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_ip()) {
      if (local_ip_ != &::google::protobuf::internal::kEmptyString) {
        local_ip_->clear();
      }
    }
  }
  ip_port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string local_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_ip().data(), this->local_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_port;
        break;
      }

      // repeated string ip_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_port(this->ip_port_size() - 1).data(),
            this->ip_port(this->ip_port_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_port;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string local_ip = 1;
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_ip(), output);
  }

  // repeated string ip_port = 2;
  for (int i = 0; i < this->ip_port_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ip_port(i).data(), this->ip_port(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_port(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string local_ip = 1;
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_ip(), target);
  }

  // repeated string ip_port = 2;
  for (int i = 0; i < this->ip_port_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_port(i).data(), this->ip_port(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ip_port(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string local_ip = 1;
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_ip());
    }

  }
  // repeated string ip_port = 2;
  total_size += 1 * this->ip_port_size();
  for (int i = 0; i < this->ip_port_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_port(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfoRequest::MergeFrom(const NodeInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_port_.MergeFrom(from.ip_port_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_ip()) {
      set_local_ip(from.local_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoRequest::CopyFrom(const NodeInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeInfoRequest::Swap(NodeInfoRequest* other) {
  if (other != this) {
    std::swap(local_ip_, other->local_ip_);
    ip_port_.Swap(&other->ip_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfoRequest_descriptor_;
  metadata.reflection = NodeInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeInfoResponse::kIpPortFieldNumber;
#endif  // !_MSC_VER

NodeInfoResponse::NodeInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeInfoResponse::InitAsDefaultInstance() {
}

NodeInfoResponse::NodeInfoResponse(const NodeInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeInfoResponse::~NodeInfoResponse() {
  SharedDtor();
}

void NodeInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfoResponse_descriptor_;
}

const NodeInfoResponse& NodeInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_5frpc_2eproto();
  return *default_instance_;
}

NodeInfoResponse* NodeInfoResponse::default_instance_ = NULL;

NodeInfoResponse* NodeInfoResponse::New() const {
  return new NodeInfoResponse;
}

void NodeInfoResponse::Clear() {
  ip_port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ip_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_port(this->ip_port_size() - 1).data(),
            this->ip_port(this->ip_port_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ip_port;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string ip_port = 1;
  for (int i = 0; i < this->ip_port_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ip_port(i).data(), this->ip_port(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip_port(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string ip_port = 1;
  for (int i = 0; i < this->ip_port_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_port(i).data(), this->ip_port(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ip_port(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeInfoResponse::ByteSize() const {
  int total_size = 0;

  // repeated string ip_port = 1;
  total_size += 1 * this->ip_port_size();
  for (int i = 0; i < this->ip_port_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_port(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeInfoResponse::MergeFrom(const NodeInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_port_.MergeFrom(from.ip_port_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoResponse::CopyFrom(const NodeInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoResponse::IsInitialized() const {

  return true;
}

void NodeInfoResponse::Swap(NodeInfoResponse* other) {
  if (other != this) {
    ip_port_.Swap(&other->ip_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfoResponse_descriptor_;
  metadata.reflection = NodeInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

RaftService::~RaftService() {}

const ::google::protobuf::ServiceDescriptor* RaftService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* RaftService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftService_descriptor_;
}

void RaftService::rpc_heart(::google::protobuf::RpcController* controller,
                         const ::raft::HeartRequest*,
                         ::raft::HeartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rpc_heart() not implemented.");
  done->Run();
}

void RaftService::rpc_vote(::google::protobuf::RpcController* controller,
                         const ::raft::VoteResuest*,
                         ::raft::VoteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rpc_vote() not implemented.");
  done->Run();
}

void RaftService::rpc_node_info(::google::protobuf::RpcController* controller,
                         const ::raft::NodeInfoRequest*,
                         ::raft::NodeInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rpc_node_info() not implemented.");
  done->Run();
}

void RaftService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), RaftService_descriptor_);
  switch(method->index()) {
    case 0:
      rpc_heart(controller,
             ::google::protobuf::down_cast<const ::raft::HeartRequest*>(request),
             ::google::protobuf::down_cast< ::raft::HeartResponse*>(response),
             done);
      break;
    case 1:
      rpc_vote(controller,
             ::google::protobuf::down_cast<const ::raft::VoteResuest*>(request),
             ::google::protobuf::down_cast< ::raft::VoteResponse*>(response),
             done);
      break;
    case 2:
      rpc_node_info(controller,
             ::google::protobuf::down_cast<const ::raft::NodeInfoRequest*>(request),
             ::google::protobuf::down_cast< ::raft::NodeInfoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RaftService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft::HeartRequest::default_instance();
    case 1:
      return ::raft::VoteResuest::default_instance();
    case 2:
      return ::raft::NodeInfoRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& RaftService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft::HeartResponse::default_instance();
    case 1:
      return ::raft::VoteResponse::default_instance();
    case 2:
      return ::raft::NodeInfoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

RaftService_Stub::RaftService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftService_Stub::RaftService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RaftService_Stub::~RaftService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftService_Stub::rpc_heart(::google::protobuf::RpcController* controller,
                              const ::raft::HeartRequest* request,
                              ::raft::HeartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftService_Stub::rpc_vote(::google::protobuf::RpcController* controller,
                              const ::raft::VoteResuest* request,
                              ::raft::VoteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftService_Stub::rpc_node_info(::google::protobuf::RpcController* controller,
                              const ::raft::NodeInfoRequest* request,
                              ::raft::NodeInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)
