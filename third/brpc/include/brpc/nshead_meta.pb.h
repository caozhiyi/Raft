// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brpc/nshead_meta.proto

#ifndef PROTOBUF_brpc_2fnshead_5fmeta_2eproto__INCLUDED
#define PROTOBUF_brpc_2fnshead_5fmeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "brpc/options.pb.h"
// @@protoc_insertion_point(includes)

namespace brpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_brpc_2fnshead_5fmeta_2eproto();
void protobuf_AssignDesc_brpc_2fnshead_5fmeta_2eproto();
void protobuf_ShutdownFile_brpc_2fnshead_5fmeta_2eproto();

class NsheadMeta;

// ===================================================================

class NsheadMeta : public ::google::protobuf::Message {
 public:
  NsheadMeta();
  virtual ~NsheadMeta();

  NsheadMeta(const NsheadMeta& from);

  inline NsheadMeta& operator=(const NsheadMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NsheadMeta& default_instance();

  void Swap(NsheadMeta* other);

  // implements Message ----------------------------------------------

  NsheadMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NsheadMeta& from);
  void MergeFrom(const NsheadMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string full_method_name = 1;
  inline bool has_full_method_name() const;
  inline void clear_full_method_name();
  static const int kFullMethodNameFieldNumber = 1;
  inline const ::std::string& full_method_name() const;
  inline void set_full_method_name(const ::std::string& value);
  inline void set_full_method_name(const char* value);
  inline void set_full_method_name(const char* value, size_t size);
  inline ::std::string* mutable_full_method_name();
  inline ::std::string* release_full_method_name();
  inline void set_allocated_full_method_name(::std::string* full_method_name);

  // optional int64 correlation_id = 2;
  inline bool has_correlation_id() const;
  inline void clear_correlation_id();
  static const int kCorrelationIdFieldNumber = 2;
  inline ::google::protobuf::int64 correlation_id() const;
  inline void set_correlation_id(::google::protobuf::int64 value);

  // optional int64 log_id = 3;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 3;
  inline ::google::protobuf::int64 log_id() const;
  inline void set_log_id(::google::protobuf::int64 value);

  // optional int32 attachment_size = 4;
  inline bool has_attachment_size() const;
  inline void clear_attachment_size();
  static const int kAttachmentSizeFieldNumber = 4;
  inline ::google::protobuf::int32 attachment_size() const;
  inline void set_attachment_size(::google::protobuf::int32 value);

  // optional .brpc.CompressType compress_type = 5;
  inline bool has_compress_type() const;
  inline void clear_compress_type();
  static const int kCompressTypeFieldNumber = 5;
  inline ::brpc::CompressType compress_type() const;
  inline void set_compress_type(::brpc::CompressType value);

  // optional int64 trace_id = 6;
  inline bool has_trace_id() const;
  inline void clear_trace_id();
  static const int kTraceIdFieldNumber = 6;
  inline ::google::protobuf::int64 trace_id() const;
  inline void set_trace_id(::google::protobuf::int64 value);

  // optional int64 span_id = 7;
  inline bool has_span_id() const;
  inline void clear_span_id();
  static const int kSpanIdFieldNumber = 7;
  inline ::google::protobuf::int64 span_id() const;
  inline void set_span_id(::google::protobuf::int64 value);

  // optional int64 parent_span_id = 8;
  inline bool has_parent_span_id() const;
  inline void clear_parent_span_id();
  static const int kParentSpanIdFieldNumber = 8;
  inline ::google::protobuf::int64 parent_span_id() const;
  inline void set_parent_span_id(::google::protobuf::int64 value);

  // optional bytes user_string = 9;
  inline bool has_user_string() const;
  inline void clear_user_string();
  static const int kUserStringFieldNumber = 9;
  inline const ::std::string& user_string() const;
  inline void set_user_string(const ::std::string& value);
  inline void set_user_string(const char* value);
  inline void set_user_string(const void* value, size_t size);
  inline ::std::string* mutable_user_string();
  inline ::std::string* release_user_string();
  inline void set_allocated_user_string(::std::string* user_string);

  // @@protoc_insertion_point(class_scope:brpc.NsheadMeta)
 private:
  inline void set_has_full_method_name();
  inline void clear_has_full_method_name();
  inline void set_has_correlation_id();
  inline void clear_has_correlation_id();
  inline void set_has_log_id();
  inline void clear_has_log_id();
  inline void set_has_attachment_size();
  inline void clear_has_attachment_size();
  inline void set_has_compress_type();
  inline void clear_has_compress_type();
  inline void set_has_trace_id();
  inline void clear_has_trace_id();
  inline void set_has_span_id();
  inline void clear_has_span_id();
  inline void set_has_parent_span_id();
  inline void clear_has_parent_span_id();
  inline void set_has_user_string();
  inline void clear_has_user_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* full_method_name_;
  ::google::protobuf::int64 correlation_id_;
  ::google::protobuf::int64 log_id_;
  ::google::protobuf::int32 attachment_size_;
  int compress_type_;
  ::google::protobuf::int64 trace_id_;
  ::google::protobuf::int64 span_id_;
  ::google::protobuf::int64 parent_span_id_;
  ::std::string* user_string_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_brpc_2fnshead_5fmeta_2eproto();
  friend void protobuf_AssignDesc_brpc_2fnshead_5fmeta_2eproto();
  friend void protobuf_ShutdownFile_brpc_2fnshead_5fmeta_2eproto();

  void InitAsDefaultInstance();
  static NsheadMeta* default_instance_;
};
// ===================================================================


// ===================================================================

// NsheadMeta

// required string full_method_name = 1;
inline bool NsheadMeta::has_full_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NsheadMeta::set_has_full_method_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NsheadMeta::clear_has_full_method_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NsheadMeta::clear_full_method_name() {
  if (full_method_name_ != &::google::protobuf::internal::kEmptyString) {
    full_method_name_->clear();
  }
  clear_has_full_method_name();
}
inline const ::std::string& NsheadMeta::full_method_name() const {
  return *full_method_name_;
}
inline void NsheadMeta::set_full_method_name(const ::std::string& value) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(value);
}
inline void NsheadMeta::set_full_method_name(const char* value) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(value);
}
inline void NsheadMeta::set_full_method_name(const char* value, size_t size) {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  full_method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NsheadMeta::mutable_full_method_name() {
  set_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    full_method_name_ = new ::std::string;
  }
  return full_method_name_;
}
inline ::std::string* NsheadMeta::release_full_method_name() {
  clear_has_full_method_name();
  if (full_method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_method_name_;
    full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NsheadMeta::set_allocated_full_method_name(::std::string* full_method_name) {
  if (full_method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_method_name_;
  }
  if (full_method_name) {
    set_has_full_method_name();
    full_method_name_ = full_method_name;
  } else {
    clear_has_full_method_name();
    full_method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 correlation_id = 2;
inline bool NsheadMeta::has_correlation_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NsheadMeta::set_has_correlation_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NsheadMeta::clear_has_correlation_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NsheadMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_LONGLONG(0);
  clear_has_correlation_id();
}
inline ::google::protobuf::int64 NsheadMeta::correlation_id() const {
  return correlation_id_;
}
inline void NsheadMeta::set_correlation_id(::google::protobuf::int64 value) {
  set_has_correlation_id();
  correlation_id_ = value;
}

// optional int64 log_id = 3;
inline bool NsheadMeta::has_log_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NsheadMeta::set_has_log_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NsheadMeta::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NsheadMeta::clear_log_id() {
  log_id_ = GOOGLE_LONGLONG(0);
  clear_has_log_id();
}
inline ::google::protobuf::int64 NsheadMeta::log_id() const {
  return log_id_;
}
inline void NsheadMeta::set_log_id(::google::protobuf::int64 value) {
  set_has_log_id();
  log_id_ = value;
}

// optional int32 attachment_size = 4;
inline bool NsheadMeta::has_attachment_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NsheadMeta::set_has_attachment_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NsheadMeta::clear_has_attachment_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NsheadMeta::clear_attachment_size() {
  attachment_size_ = 0;
  clear_has_attachment_size();
}
inline ::google::protobuf::int32 NsheadMeta::attachment_size() const {
  return attachment_size_;
}
inline void NsheadMeta::set_attachment_size(::google::protobuf::int32 value) {
  set_has_attachment_size();
  attachment_size_ = value;
}

// optional .brpc.CompressType compress_type = 5;
inline bool NsheadMeta::has_compress_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NsheadMeta::set_has_compress_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NsheadMeta::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NsheadMeta::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
inline ::brpc::CompressType NsheadMeta::compress_type() const {
  return static_cast< ::brpc::CompressType >(compress_type_);
}
inline void NsheadMeta::set_compress_type(::brpc::CompressType value) {
  assert(::brpc::CompressType_IsValid(value));
  set_has_compress_type();
  compress_type_ = value;
}

// optional int64 trace_id = 6;
inline bool NsheadMeta::has_trace_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NsheadMeta::set_has_trace_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NsheadMeta::clear_has_trace_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NsheadMeta::clear_trace_id() {
  trace_id_ = GOOGLE_LONGLONG(0);
  clear_has_trace_id();
}
inline ::google::protobuf::int64 NsheadMeta::trace_id() const {
  return trace_id_;
}
inline void NsheadMeta::set_trace_id(::google::protobuf::int64 value) {
  set_has_trace_id();
  trace_id_ = value;
}

// optional int64 span_id = 7;
inline bool NsheadMeta::has_span_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NsheadMeta::set_has_span_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NsheadMeta::clear_has_span_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NsheadMeta::clear_span_id() {
  span_id_ = GOOGLE_LONGLONG(0);
  clear_has_span_id();
}
inline ::google::protobuf::int64 NsheadMeta::span_id() const {
  return span_id_;
}
inline void NsheadMeta::set_span_id(::google::protobuf::int64 value) {
  set_has_span_id();
  span_id_ = value;
}

// optional int64 parent_span_id = 8;
inline bool NsheadMeta::has_parent_span_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NsheadMeta::set_has_parent_span_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NsheadMeta::clear_has_parent_span_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NsheadMeta::clear_parent_span_id() {
  parent_span_id_ = GOOGLE_LONGLONG(0);
  clear_has_parent_span_id();
}
inline ::google::protobuf::int64 NsheadMeta::parent_span_id() const {
  return parent_span_id_;
}
inline void NsheadMeta::set_parent_span_id(::google::protobuf::int64 value) {
  set_has_parent_span_id();
  parent_span_id_ = value;
}

// optional bytes user_string = 9;
inline bool NsheadMeta::has_user_string() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NsheadMeta::set_has_user_string() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NsheadMeta::clear_has_user_string() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NsheadMeta::clear_user_string() {
  if (user_string_ != &::google::protobuf::internal::kEmptyString) {
    user_string_->clear();
  }
  clear_has_user_string();
}
inline const ::std::string& NsheadMeta::user_string() const {
  return *user_string_;
}
inline void NsheadMeta::set_user_string(const ::std::string& value) {
  set_has_user_string();
  if (user_string_ == &::google::protobuf::internal::kEmptyString) {
    user_string_ = new ::std::string;
  }
  user_string_->assign(value);
}
inline void NsheadMeta::set_user_string(const char* value) {
  set_has_user_string();
  if (user_string_ == &::google::protobuf::internal::kEmptyString) {
    user_string_ = new ::std::string;
  }
  user_string_->assign(value);
}
inline void NsheadMeta::set_user_string(const void* value, size_t size) {
  set_has_user_string();
  if (user_string_ == &::google::protobuf::internal::kEmptyString) {
    user_string_ = new ::std::string;
  }
  user_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NsheadMeta::mutable_user_string() {
  set_has_user_string();
  if (user_string_ == &::google::protobuf::internal::kEmptyString) {
    user_string_ = new ::std::string;
  }
  return user_string_;
}
inline ::std::string* NsheadMeta::release_user_string() {
  clear_has_user_string();
  if (user_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_string_;
    user_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NsheadMeta::set_allocated_user_string(::std::string* user_string) {
  if (user_string_ != &::google::protobuf::internal::kEmptyString) {
    delete user_string_;
  }
  if (user_string) {
    set_has_user_string();
    user_string_ = user_string;
  } else {
    clear_has_user_string();
    user_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_brpc_2fnshead_5fmeta_2eproto__INCLUDED
