// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_rpc.proto

#include "raft_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace raft_rpc {
class HeartRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartRequest> _instance;
} _HeartRequest_default_instance_;
class HeartResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartResponse> _instance;
} _HeartResponse_default_instance_;
class VoteResuestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteResuest> _instance;
} _VoteResuest_default_instance_;
class VoteToResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteToResponse> _instance;
} _VoteToResponse_default_instance_;
class SyncToResuestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncToResuest> _instance;
} _SyncToResuest_default_instance_;
class SyncToResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncToResponse> _instance;
} _SyncToResponse_default_instance_;
}  // namespace raft_rpc
static void InitDefaultsHeartRequest_raft_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_HeartRequest_default_instance_;
    new (ptr) ::raft_rpc::HeartRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::HeartRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeartRequest_raft_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartRequest_raft_5frpc_2eproto}, {}};

static void InitDefaultsHeartResponse_raft_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_HeartResponse_default_instance_;
    new (ptr) ::raft_rpc::HeartResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::HeartResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeartResponse_raft_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartResponse_raft_5frpc_2eproto}, {}};

static void InitDefaultsVoteResuest_raft_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_VoteResuest_default_instance_;
    new (ptr) ::raft_rpc::VoteResuest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::VoteResuest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoteResuest_raft_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoteResuest_raft_5frpc_2eproto}, {}};

static void InitDefaultsVoteToResponse_raft_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_VoteToResponse_default_instance_;
    new (ptr) ::raft_rpc::VoteToResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::VoteToResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VoteToResponse_raft_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoteToResponse_raft_5frpc_2eproto}, {}};

static void InitDefaultsSyncToResuest_raft_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_SyncToResuest_default_instance_;
    new (ptr) ::raft_rpc::SyncToResuest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::SyncToResuest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncToResuest_raft_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncToResuest_raft_5frpc_2eproto}, {}};

static void InitDefaultsSyncToResponse_raft_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raft_rpc::_SyncToResponse_default_instance_;
    new (ptr) ::raft_rpc::SyncToResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft_rpc::SyncToResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncToResponse_raft_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncToResponse_raft_5frpc_2eproto}, {}};

void InitDefaults_raft_5frpc_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_HeartRequest_raft_5frpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartResponse_raft_5frpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoteResuest_raft_5frpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VoteToResponse_raft_5frpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncToResuest_raft_5frpc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncToResponse_raft_5frpc_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_raft_5frpc_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_raft_5frpc_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_raft_5frpc_2eproto[1];

const ::google::protobuf::uint32 TableStruct_raft_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartRequest, version_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartRequest, msg_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartRequest, done_msg_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::HeartResponse, version_),
  0,
  PROTOBUF_FIELD_OFFSET(::raft_rpc::VoteResuest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::VoteResuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::VoteToResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::VoteToResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::VoteToResponse, vote_),
  0,
  PROTOBUF_FIELD_OFFSET(::raft_rpc::SyncToResuest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::SyncToResuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::SyncToResuest, version_),
  0,
  PROTOBUF_FIELD_OFFSET(::raft_rpc::SyncToResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft_rpc::SyncToResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft_rpc::SyncToResponse, version_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::raft_rpc::HeartRequest)},
  { 11, 17, sizeof(::raft_rpc::HeartResponse)},
  { 18, 23, sizeof(::raft_rpc::VoteResuest)},
  { 23, 29, sizeof(::raft_rpc::VoteToResponse)},
  { 30, 36, sizeof(::raft_rpc::SyncToResuest)},
  { 37, 43, sizeof(::raft_rpc::SyncToResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_rpc::_HeartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_rpc::_HeartResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_rpc::_VoteResuest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_rpc::_VoteToResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_rpc::_SyncToResuest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft_rpc::_SyncToResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_raft_5frpc_2eproto = {
  {}, AddDescriptors_raft_5frpc_2eproto, "raft_rpc.proto", schemas,
  file_default_instances, TableStruct_raft_5frpc_2eproto::offsets,
  file_level_metadata_raft_5frpc_2eproto, 6, file_level_enum_descriptors_raft_5frpc_2eproto, file_level_service_descriptors_raft_5frpc_2eproto,
};

const char descriptor_table_protodef_raft_5frpc_2eproto[] =
  "\n\016raft_rpc.proto\022\010raft_rpc\">\n\014HeartReque"
  "st\022\017\n\007version\030\001 \002(\020\022\013\n\003msg\030\002 \003(\t\022\020\n\010done"
  "_msg\030\003 \001(\010\" \n\rHeartResponse\022\017\n\007version\030\001"
  " \002(\020\"\r\n\013VoteResuest\"\036\n\016VoteToResponse\022\014\n"
  "\004vote\030\001 \002(\010\" \n\rSyncToResuest\022\017\n\007version\030"
  "\001 \002(\020\"!\n\016SyncToResponse\022\017\n\007version\030\001 \002(\020"
  "2\320\001\n\013RaftService\022\?\n\014RpcNodeHeart\022\026.raft_"
  "rpc.HeartRequest\032\027.raft_rpc.HeartRespons"
  "e\022>\n\013RpcNodeVote\022\025.raft_rpc.VoteResuest\032"
  "\030.raft_rpc.VoteToResponse\022@\n\013RpcNodeSync"
  "\022\027.raft_rpc.SyncToResuest\032\030.raft_rpc.Syn"
  "cToResponseB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_raft_5frpc_2eproto = {
  false, InitDefaults_raft_5frpc_2eproto, 
  descriptor_table_protodef_raft_5frpc_2eproto,
  "raft_rpc.proto", &assign_descriptors_table_raft_5frpc_2eproto, 456,
};

void AddDescriptors_raft_5frpc_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_raft_5frpc_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raft_5frpc_2eproto = []() { AddDescriptors_raft_5frpc_2eproto(); return true; }();
namespace raft_rpc {

// ===================================================================

void HeartRequest::InitAsDefaultInstance() {
}
class HeartRequest::HasBitSetters {
 public:
  static void set_has_version(HeartRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_done_msg(HeartRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartRequest::kVersionFieldNumber;
const int HeartRequest::kMsgFieldNumber;
const int HeartRequest::kDoneMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartRequest::HeartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.HeartRequest)
}
HeartRequest::HeartRequest(const HeartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      msg_(from.msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&done_msg_) -
    reinterpret_cast<char*>(&version_)) + sizeof(done_msg_));
  // @@protoc_insertion_point(copy_constructor:raft_rpc.HeartRequest)
}

void HeartRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HeartRequest_raft_5frpc_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_msg_) -
      reinterpret_cast<char*>(&version_)) + sizeof(done_msg_));
}

HeartRequest::~HeartRequest() {
  // @@protoc_insertion_point(destructor:raft_rpc.HeartRequest)
  SharedDtor();
}

void HeartRequest::SharedDtor() {
}

void HeartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartRequest& HeartRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HeartRequest_raft_5frpc_2eproto.base);
  return *internal_default_instance();
}


void HeartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.HeartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&done_msg_) -
        reinterpret_cast<char*>(&version_)) + sizeof(done_msg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeartRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HeartRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::int64>(ptr));
        ptr += sizeof(::google::protobuf::int64);
        break;
      }
      // repeated string msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("raft_rpc.HeartRequest.msg");
          object = msg->add_msg();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional bool done_msg = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_done_msg(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_rpc.HeartRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg(this->msg_size() - 1).data(),
            static_cast<int>(this->msg(this->msg_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "raft_rpc.HeartRequest.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool done_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_done_msg(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_msg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_rpc.HeartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_rpc.HeartRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_rpc.HeartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->version(), output);
  }

  // repeated string msg = 2;
  for (int i = 0, n = this->msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg(i).data(), static_cast<int>(this->msg(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_rpc.HeartRequest.msg");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(i), output);
  }

  // optional bool done_msg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_rpc.HeartRequest)
}

::google::protobuf::uint8* HeartRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.HeartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->version(), target);
  }

  // repeated string msg = 2;
  for (int i = 0, n = this->msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg(i).data(), static_cast<int>(this->msg(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "raft_rpc.HeartRequest.msg");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->msg(i), target);
  }

  // optional bool done_msg = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.HeartRequest)
  return target;
}

size_t HeartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.HeartRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sfixed64 version = 1;
  if (has_version()) {
    total_size += 1 + 8;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string msg = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msg_size());
  for (int i = 0, n = this->msg_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msg(i));
  }

  // optional bool done_msg = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.HeartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HeartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.HeartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.HeartRequest)
    MergeFrom(*source);
  }
}

void HeartRequest::MergeFrom(const HeartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.HeartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_.MergeFrom(from.msg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      done_msg_ = from.done_msg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.HeartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartRequest::CopyFrom(const HeartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.HeartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HeartRequest::Swap(HeartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartRequest::InternalSwap(HeartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.InternalSwap(CastToBase(&other->msg_));
  swap(version_, other->version_);
  swap(done_msg_, other->done_msg_);
}

::google::protobuf::Metadata HeartRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5frpc_2eproto);
  return ::file_level_metadata_raft_5frpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HeartResponse::InitAsDefaultInstance() {
}
class HeartResponse::HasBitSetters {
 public:
  static void set_has_version(HeartResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartResponse::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartResponse::HeartResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.HeartResponse)
}
HeartResponse::HeartResponse(const HeartResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:raft_rpc.HeartResponse)
}

void HeartResponse::SharedCtor() {
  version_ = PROTOBUF_LONGLONG(0);
}

HeartResponse::~HeartResponse() {
  // @@protoc_insertion_point(destructor:raft_rpc.HeartResponse)
  SharedDtor();
}

void HeartResponse::SharedDtor() {
}

void HeartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartResponse& HeartResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HeartResponse_raft_5frpc_2eproto.base);
  return *internal_default_instance();
}


void HeartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.HeartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeartResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HeartResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::int64>(ptr));
        ptr += sizeof(::google::protobuf::int64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_rpc.HeartResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_rpc.HeartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_rpc.HeartResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_rpc.HeartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_rpc.HeartResponse)
}

::google::protobuf::uint8* HeartResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.HeartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.HeartResponse)
  return target;
}

size_t HeartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.HeartResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sfixed64 version = 1;
  if (has_version()) {
    total_size += 1 + 8;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.HeartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartResponse* source =
      ::google::protobuf::DynamicCastToGenerated<HeartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.HeartResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.HeartResponse)
    MergeFrom(*source);
  }
}

void HeartResponse::MergeFrom(const HeartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.HeartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    set_version(from.version());
  }
}

void HeartResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.HeartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartResponse::CopyFrom(const HeartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.HeartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HeartResponse::Swap(HeartResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartResponse::InternalSwap(HeartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::google::protobuf::Metadata HeartResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5frpc_2eproto);
  return ::file_level_metadata_raft_5frpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoteResuest::InitAsDefaultInstance() {
}
class VoteResuest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteResuest::VoteResuest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.VoteResuest)
}
VoteResuest::VoteResuest(const VoteResuest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raft_rpc.VoteResuest)
}

void VoteResuest::SharedCtor() {
}

VoteResuest::~VoteResuest() {
  // @@protoc_insertion_point(destructor:raft_rpc.VoteResuest)
  SharedDtor();
}

void VoteResuest::SharedDtor() {
}

void VoteResuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteResuest& VoteResuest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoteResuest_raft_5frpc_2eproto.base);
  return *internal_default_instance();
}


void VoteResuest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.VoteResuest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoteResuest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoteResuest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoteResuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_rpc.VoteResuest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_rpc.VoteResuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_rpc.VoteResuest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoteResuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_rpc.VoteResuest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_rpc.VoteResuest)
}

::google::protobuf::uint8* VoteResuest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.VoteResuest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.VoteResuest)
  return target;
}

size_t VoteResuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.VoteResuest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteResuest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.VoteResuest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteResuest* source =
      ::google::protobuf::DynamicCastToGenerated<VoteResuest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.VoteResuest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.VoteResuest)
    MergeFrom(*source);
  }
}

void VoteResuest::MergeFrom(const VoteResuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.VoteResuest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VoteResuest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.VoteResuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResuest::CopyFrom(const VoteResuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.VoteResuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResuest::IsInitialized() const {
  return true;
}

void VoteResuest::Swap(VoteResuest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteResuest::InternalSwap(VoteResuest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata VoteResuest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5frpc_2eproto);
  return ::file_level_metadata_raft_5frpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void VoteToResponse::InitAsDefaultInstance() {
}
class VoteToResponse::HasBitSetters {
 public:
  static void set_has_vote(VoteToResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteToResponse::kVoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteToResponse::VoteToResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.VoteToResponse)
}
VoteToResponse::VoteToResponse(const VoteToResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vote_ = from.vote_;
  // @@protoc_insertion_point(copy_constructor:raft_rpc.VoteToResponse)
}

void VoteToResponse::SharedCtor() {
  vote_ = false;
}

VoteToResponse::~VoteToResponse() {
  // @@protoc_insertion_point(destructor:raft_rpc.VoteToResponse)
  SharedDtor();
}

void VoteToResponse::SharedDtor() {
}

void VoteToResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteToResponse& VoteToResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoteToResponse_raft_5frpc_2eproto.base);
  return *internal_default_instance();
}


void VoteToResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.VoteToResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoteToResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoteToResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bool vote = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vote(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoteToResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_rpc.VoteToResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool vote = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_vote(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_rpc.VoteToResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_rpc.VoteToResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoteToResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_rpc.VoteToResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool vote = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->vote(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_rpc.VoteToResponse)
}

::google::protobuf::uint8* VoteToResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.VoteToResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool vote = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->vote(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.VoteToResponse)
  return target;
}

size_t VoteToResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.VoteToResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool vote = 1;
  if (has_vote()) {
    total_size += 1 + 1;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteToResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.VoteToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteToResponse* source =
      ::google::protobuf::DynamicCastToGenerated<VoteToResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.VoteToResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.VoteToResponse)
    MergeFrom(*source);
  }
}

void VoteToResponse::MergeFrom(const VoteToResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.VoteToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vote()) {
    set_vote(from.vote());
  }
}

void VoteToResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.VoteToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteToResponse::CopyFrom(const VoteToResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.VoteToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteToResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void VoteToResponse::Swap(VoteToResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteToResponse::InternalSwap(VoteToResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vote_, other->vote_);
}

::google::protobuf::Metadata VoteToResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5frpc_2eproto);
  return ::file_level_metadata_raft_5frpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncToResuest::InitAsDefaultInstance() {
}
class SyncToResuest::HasBitSetters {
 public:
  static void set_has_version(SyncToResuest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncToResuest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncToResuest::SyncToResuest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.SyncToResuest)
}
SyncToResuest::SyncToResuest(const SyncToResuest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:raft_rpc.SyncToResuest)
}

void SyncToResuest::SharedCtor() {
  version_ = PROTOBUF_LONGLONG(0);
}

SyncToResuest::~SyncToResuest() {
  // @@protoc_insertion_point(destructor:raft_rpc.SyncToResuest)
  SharedDtor();
}

void SyncToResuest::SharedDtor() {
}

void SyncToResuest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncToResuest& SyncToResuest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncToResuest_raft_5frpc_2eproto.base);
  return *internal_default_instance();
}


void SyncToResuest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.SyncToResuest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncToResuest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncToResuest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::int64>(ptr));
        ptr += sizeof(::google::protobuf::int64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncToResuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_rpc.SyncToResuest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_rpc.SyncToResuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_rpc.SyncToResuest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncToResuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_rpc.SyncToResuest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_rpc.SyncToResuest)
}

::google::protobuf::uint8* SyncToResuest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.SyncToResuest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.SyncToResuest)
  return target;
}

size_t SyncToResuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.SyncToResuest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sfixed64 version = 1;
  if (has_version()) {
    total_size += 1 + 8;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncToResuest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.SyncToResuest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncToResuest* source =
      ::google::protobuf::DynamicCastToGenerated<SyncToResuest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.SyncToResuest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.SyncToResuest)
    MergeFrom(*source);
  }
}

void SyncToResuest::MergeFrom(const SyncToResuest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.SyncToResuest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    set_version(from.version());
  }
}

void SyncToResuest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.SyncToResuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncToResuest::CopyFrom(const SyncToResuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.SyncToResuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncToResuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SyncToResuest::Swap(SyncToResuest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncToResuest::InternalSwap(SyncToResuest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::google::protobuf::Metadata SyncToResuest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5frpc_2eproto);
  return ::file_level_metadata_raft_5frpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SyncToResponse::InitAsDefaultInstance() {
}
class SyncToResponse::HasBitSetters {
 public:
  static void set_has_version(SyncToResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncToResponse::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncToResponse::SyncToResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_rpc.SyncToResponse)
}
SyncToResponse::SyncToResponse(const SyncToResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:raft_rpc.SyncToResponse)
}

void SyncToResponse::SharedCtor() {
  version_ = PROTOBUF_LONGLONG(0);
}

SyncToResponse::~SyncToResponse() {
  // @@protoc_insertion_point(destructor:raft_rpc.SyncToResponse)
  SharedDtor();
}

void SyncToResponse::SharedDtor() {
}

void SyncToResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncToResponse& SyncToResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SyncToResponse_raft_5frpc_2eproto.base);
  return *internal_default_instance();
}


void SyncToResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_rpc.SyncToResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SyncToResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SyncToResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::int64>(ptr));
        ptr += sizeof(::google::protobuf::int64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SyncToResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_rpc.SyncToResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_rpc.SyncToResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_rpc.SyncToResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SyncToResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_rpc.SyncToResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:raft_rpc.SyncToResponse)
}

::google::protobuf::uint8* SyncToResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft_rpc.SyncToResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft_rpc.SyncToResponse)
  return target;
}

size_t SyncToResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_rpc.SyncToResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required sfixed64 version = 1;
  if (has_version()) {
    total_size += 1 + 8;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncToResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_rpc.SyncToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncToResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SyncToResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_rpc.SyncToResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_rpc.SyncToResponse)
    MergeFrom(*source);
  }
}

void SyncToResponse::MergeFrom(const SyncToResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_rpc.SyncToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    set_version(from.version());
  }
}

void SyncToResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_rpc.SyncToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncToResponse::CopyFrom(const SyncToResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_rpc.SyncToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncToResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SyncToResponse::Swap(SyncToResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncToResponse::InternalSwap(SyncToResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::google::protobuf::Metadata SyncToResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_raft_5frpc_2eproto);
  return ::file_level_metadata_raft_5frpc_2eproto[kIndexInFileMessages];
}


// ===================================================================

RaftService::~RaftService() {}

const ::google::protobuf::ServiceDescriptor* RaftService::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_raft_5frpc_2eproto);
  return file_level_service_descriptors_raft_5frpc_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* RaftService::GetDescriptor() {
  return descriptor();
}

void RaftService::RpcNodeHeart(::google::protobuf::RpcController* controller,
                         const ::raft_rpc::HeartRequest*,
                         ::raft_rpc::HeartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RpcNodeHeart() not implemented.");
  done->Run();
}

void RaftService::RpcNodeVote(::google::protobuf::RpcController* controller,
                         const ::raft_rpc::VoteResuest*,
                         ::raft_rpc::VoteToResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RpcNodeVote() not implemented.");
  done->Run();
}

void RaftService::RpcNodeSync(::google::protobuf::RpcController* controller,
                         const ::raft_rpc::SyncToResuest*,
                         ::raft_rpc::SyncToResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RpcNodeSync() not implemented.");
  done->Run();
}

void RaftService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_raft_5frpc_2eproto[0]);
  switch(method->index()) {
    case 0:
      RpcNodeHeart(controller,
             ::google::protobuf::down_cast<const ::raft_rpc::HeartRequest*>(request),
             ::google::protobuf::down_cast< ::raft_rpc::HeartResponse*>(response),
             done);
      break;
    case 1:
      RpcNodeVote(controller,
             ::google::protobuf::down_cast<const ::raft_rpc::VoteResuest*>(request),
             ::google::protobuf::down_cast< ::raft_rpc::VoteToResponse*>(response),
             done);
      break;
    case 2:
      RpcNodeSync(controller,
             ::google::protobuf::down_cast<const ::raft_rpc::SyncToResuest*>(request),
             ::google::protobuf::down_cast< ::raft_rpc::SyncToResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RaftService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft_rpc::HeartRequest::default_instance();
    case 1:
      return ::raft_rpc::VoteResuest::default_instance();
    case 2:
      return ::raft_rpc::SyncToResuest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RaftService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft_rpc::HeartResponse::default_instance();
    case 1:
      return ::raft_rpc::VoteToResponse::default_instance();
    case 2:
      return ::raft_rpc::SyncToResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RaftService_Stub::RaftService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RaftService_Stub::RaftService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RaftService_Stub::~RaftService_Stub() {
  if (owns_channel_) delete channel_;
}

void RaftService_Stub::RpcNodeHeart(::google::protobuf::RpcController* controller,
                              const ::raft_rpc::HeartRequest* request,
                              ::raft_rpc::HeartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RaftService_Stub::RpcNodeVote(::google::protobuf::RpcController* controller,
                              const ::raft_rpc::VoteResuest* request,
                              ::raft_rpc::VoteToResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void RaftService_Stub::RpcNodeSync(::google::protobuf::RpcController* controller,
                              const ::raft_rpc::SyncToResuest* request,
                              ::raft_rpc::SyncToResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raft_rpc
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::raft_rpc::HeartRequest* Arena::CreateMaybeMessage< ::raft_rpc::HeartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::HeartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::HeartResponse* Arena::CreateMaybeMessage< ::raft_rpc::HeartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::HeartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::VoteResuest* Arena::CreateMaybeMessage< ::raft_rpc::VoteResuest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::VoteResuest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::VoteToResponse* Arena::CreateMaybeMessage< ::raft_rpc::VoteToResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::VoteToResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::SyncToResuest* Arena::CreateMaybeMessage< ::raft_rpc::SyncToResuest >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::SyncToResuest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft_rpc::SyncToResponse* Arena::CreateMaybeMessage< ::raft_rpc::SyncToResponse >(Arena* arena) {
  return Arena::CreateInternal< ::raft_rpc::SyncToResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
